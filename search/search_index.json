{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Accompanist is a group of libraries that aim to supplement Jetpack Compose with features that are commonly required by developers but not yet available.</p> <p>Accompanist is a labs like environment for new Compose APIs. We use it to help fill known gaps in the Compose toolkit, experiment with new APIs and to gather insight into the development experience of developing a Compose library. The goal of these libraries is to upstream them into the official toolkit, at which point they will be deprecated and removed from Accompanist.</p> <p>For more details like, why does this library exist? Why is it not part of AndroidX? Will you be releasing more libraries? Check out our Accompanist FAQ.</p>"},{"location":"#compose-versions","title":"Compose versions","text":"<p>Each release outlines what version of the Compose UI libraries it depends on. We are currently releasing multiple versions of Accompanist for the different versions of Compose:</p> Compose 1.0 (1.0.x) Compose 1.1 (1.1.x) Compose UI 1.2 (1.2.x) Compose UI 1.3 (1.3.x) Compose UI 1.4 (1.4.x) Compose UI 1.5 (1.5.x) Compose UI 1.6 (1.6.x) Compose UI 1.7 &amp; 1.8 (1.7.x) <p>For stable versions of Compose, we use the latest stable version of the Compose compiler. For non-stable versions (alpha, beta, etc), we use the latest compiler at the time of release.</p> <p>:warning: Ensure you are using the Accompanist version that matches with your Compose UI version: If you upgrade Accompanist, it will upgrade your Compose libraries version via transitive dependencies.</p>"},{"location":"#libraries","title":"Libraries","text":""},{"location":"#permissions","title":"\ud83d\udceb Permissions","text":"<p>A library that provides Android runtime permissions support for Jetpack Compose.</p>"},{"location":"#drawable-painter","title":"\ud83d\udd8c\ufe0f Drawable Painter","text":"<p>A library which provides a way to use Android Drawables as Jetpack Compose Painters.</p>"},{"location":"#adaptive","title":"\ud83d\udcdc Adaptive","text":"<p>A library providing a collection of utilities for adaptive layouts.</p>"},{"location":"#navigation-animation-deprecated-removed","title":"\ud83e\udded\u2728Navigation-Animation (Deprecated &amp; Removed)","text":"<p>See our Migration Guide for migrating to using built in support for animations in Jetpack Navigation Compose. </p>"},{"location":"#navigation-material-deprecated-removed","title":"\ud83e\udded\ud83c\udfa8\ufe0f Navigation-Material (Deprecated &amp; Removed)","text":"<p>See our Migration Guide for migrating to using built in material-navigation support. </p>"},{"location":"#system-ui-controller-deprecated-removed","title":"\ud83c\udf6b System UI Controller (Deprecated &amp; Removed)","text":"<p>We recommend migrating to edge to edge. See our Migration Guide for more details.</p>"},{"location":"#future","title":"Future?","text":"<p>Any of the features available in this group of libraries may become obsolete in the future, at which point they will (probably) become deprecated. </p> <p>We will aim to provide a migration path (where possible), to whatever supersedes the functionality.</p>"},{"location":"#snapshots","title":"Snapshots","text":"<p>Snapshots of the current development version of Accompanist are available, which track the latest commit. See here for more information. </p>"},{"location":"#why-the-name","title":"Why the name?","text":"<p>The library is all about adding some utilities around Compose. Music composing is done by a composer, and since this library is about supporting composition, the supporting role of an accompanist felt like a good name.</p>"},{"location":"#contributions","title":"Contributions","text":"<p>Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.</p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2020 The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"adaptive/","title":"Adaptive utilities for Jetpack Compose","text":"<p>A library providing a collection of utilities for adaptive layouts.</p>"},{"location":"adaptive/#calculatedisplayfeatures","title":"calculateDisplayFeatures","text":"<p><code>calculateDisplayFeatures(activity)</code> returns the current list of <code>DisplayFeature</code>s, as reported by the Jetpack WindowManager library.</p> <p>These contain the list of folds (if any), and can be used to drive components like <code>TwoPane</code>.</p>"},{"location":"adaptive/#twopane","title":"TwoPane","text":"<p><code>TwoPane</code> is a UI component that positions exactly two slots on the screen.</p> <p>The default positioning of these two slots is driven by a <code>TwoPaneStrategy</code>, which can decide to orient the two slots side-by-side horizontally or vertically, and also configure the gap between them.</p> <p>The built-in <code>HorizontalTwoPaneStrategy</code> and <code>VerticalTwoPaneStrategy</code> allow positioning the slots based on a fixed offset, or as some fraction of the space.</p> <p><code>TwoPane</code> also requires a list of display features (to be retrieved with <code>calculateDisplayFeatures</code>), and optionally a <code>FoldAwareConfiguration</code> to determine which folds to handle automatically.</p> <p>When there is a fold that intersects with the <code>TwoPane</code> component that is obscuring or separating, the <code>TwoPane</code> will automatically place the slots to avoid the fold.</p> <p>When there is no fold, the default supplied strategy will be used instead.</p>"},{"location":"adaptive/#foldawarecolumn","title":"FoldAwareColumn","text":"<p><code>FoldAwareColumn</code> is a simplified version of Column that places children in a fold-aware manner.</p> <p><code>FoldAwareColumn</code> requires a list of display features (to be retrieved with <code>calculateDisplayFeatures</code>) to determine which folds to handle automatically.</p> <p>The built-in <code>foldPadding</code> parameter is zero, and the values of the vertical padding are used in the layout determine how much space should be left around a fold when placing children.</p> <p>When there is a horizontal fold that is obscuring or separating, the layout will begin placing children from the top of the available space. If a child is projected to overlap the fold, then its y-coordinate is increased so it will be placed fully below the fold, as will any other remaining children.</p> <p>When there is no fold, the children will be placed consecutively with no y-coordinate adjustments.</p> <p>Optionally, children can be modified with the <code>ignoreFold()</code> attribute, which means that they will be placed as if no fold is present even if they overlap a fold.</p>"},{"location":"adaptive/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-adaptive:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"appcompat-theme/","title":"AppCompat Compose Theme Adapter","text":"<p>Warning</p> <p>This library is deprecated in favor of the new <code>themeadapter-appcompat</code> artifact. The migration guide and original documentation is below.</p>"},{"location":"appcompat-theme/#migration","title":"Migration","text":"<p>Accompanist AppCompat Theme Adapter has moved from the <code>appcompat-theme</code> artifact to the <code>themeadapter-appcompat</code> artifact. The implementation is identical but the dependency and import package have changed.</p>"},{"location":"appcompat-theme/#migration-steps","title":"Migration steps","text":"<ol> <li>Change the dependency from <code>com.google.accompanist:accompanist-appcompat-theme:&lt;version&gt;</code> to <code>com.google.accompanist:accompanist-themeadapter-appcompat:&lt;version&gt;</code></li> <li>Change any <code>com.google.accompanist.appcompattheme.*</code> imports to <code>com.google.accompanist.themeadapter.appcompat.*</code></li> </ol>"},{"location":"appcompat-theme/#original-docs","title":"Original Docs","text":"<p>A library that enables reuse of AppCompat XML themes for theming in Jetpack Compose.</p> <p>The basis of theming in Jetpack Compose is the <code>MaterialTheme</code> composable, where you provide <code>Colors</code>, <code>Shapes</code> and <code>Typography</code> instances containing your styling parameters:</p> <pre><code>MaterialTheme(\n    typography = type,\n    colors = colors,\n    shapes = shapes\n) {\n    // Surface, Scaffold, etc\n}\n</code></pre> <p>AppCompat XML themes allow for similar but coarser theming via XML theme attributes, like so:</p> <pre><code>&lt;style name=\"Theme.MyApp\" parent=\"Theme.AppCompat.DayNight\"&gt;\n    &lt;item name=\"colorPrimary\"&gt;@color/purple_500&lt;/item&gt;\n    &lt;item name=\"colorAccent\"&gt;@color/green_200&lt;/item&gt;\n&lt;/style&gt;\n</code></pre> <p>This library attempts to bridge the gap between AppCompat XML themes, and themes in Jetpack Compose, allowing your composable <code>MaterialTheme</code> to be based on the <code>Activity</code>'s XML theme:</p> <pre><code>AppCompatTheme {\n    // MaterialTheme.colors, MaterialTheme.shapes, MaterialTheme.typography\n    // will now contain copies of the context's theme\n}\n</code></pre> <p>This is especially handy when you're migrating an existing app, a fragment (or other UI container) at a time.</p> <p>Caution</p> <p>If you are using Material Design Components in your app, you should use the MDC Compose Theme Adapter instead, as it allows much finer-grained reading of your theme.</p>"},{"location":"appcompat-theme/#customizing-the-theme","title":"Customizing the theme","text":"<p>The <code>AppCompatTheme()</code> function will automatically read the host context's AppCompat theme and pass them to <code>MaterialTheme</code> on your behalf, but if you want to customize the generated values, you can do so via the <code>createAppCompatTheme()</code> function:</p> <pre><code>val context = LocalContext.current\nvar (colors, type) = context.createAppCompatTheme()\n\n// Modify colors or type as required. Then pass them\n// through to MaterialTheme...\n\nMaterialTheme(\n    colors = colors,\n    typography = type\n) {\n    // rest of layout\n}\n</code></pre>"},{"location":"appcompat-theme/#generated-theme","title":"Generated theme","text":"<p>Synthesizing a material theme from a <code>Theme.AppCompat</code> theme is not perfect, since <code>Theme.AppCompat</code> does not expose the same level of customization as is available in material theming. Going through the pillars of material theming:</p>"},{"location":"appcompat-theme/#colors","title":"Colors","text":"<p>AppCompat has a limited set of top-level color attributes, which means that <code>AppCompatTheme()</code> has to generate/select alternative colors in certain situations. The mapping is currently:</p> MaterialTheme color AppCompat attribute primary <code>colorPrimary</code> primaryVariant <code>colorPrimaryDark</code> onPrimary Calculated black/white secondary <code>colorAccent</code> secondaryVariant <code>colorAccent</code> onSecondary Calculated black/white surface Default onSurface <code>android:textColorPrimary</code>, else calculated black/white background <code>android:colorBackground</code> onBackground <code>android:textColorPrimary</code>, else calculated black/white error <code>colorError</code> onError Calculated black/white <p>Where the table says \"calculated black/white\", this means either black/white, depending on which provides the greatest contrast against the corresponding background color.</p>"},{"location":"appcompat-theme/#typography","title":"Typography","text":"<p>AppCompat does not provide any semantic text appearances (such as headline6, body1, etc), and instead relies on text appearances for specific widgets or use cases. As such, the only thing we read from an AppCompat theme is the default <code>app:fontFamily</code> or <code>android:fontFamily</code>. For example:</p> <pre><code>&lt;style name=\"Theme.MyApp\" parent=\"Theme.AppCompat\"&gt;\n    &lt;item name=\"fontFamily\"&gt;@font/my_font&lt;/item&gt;\n&lt;/style&gt;\n</code></pre> <p>Compose does not currently support downloadable fonts, so any font referenced from the theme should from your resources. See here for more information.</p>"},{"location":"appcompat-theme/#shape","title":"Shape","text":"<p>AppCompat has no concept of shape theming, therefore we use the default value from <code>MaterialTheme.shapes</code>. If you wish to provide custom values, use the <code>shapes</code> parameter on <code>AppCompatTheme</code>.</p>"},{"location":"appcompat-theme/#limitations","title":"Limitations","text":"<p>There are some known limitations with the implementation at the moment:</p> <ul> <li>This relies on your <code>Activity</code>/<code>Context</code> theme extending one of the <code>Theme.AppCompat</code> themes.</li> <li>Variable fonts are not supported in Compose yet, meaning that the value of <code>android:fontVariationSettings</code> are currently ignored.</li> <li>You can modify the resulting <code>MaterialTheme</code> in Compose as required, but this only works in Compose. Any changes you make will not be reflected in the Activity theme.</li> </ul>"},{"location":"appcompat-theme/#usage","title":"Usage","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-appcompat-theme:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"appcompat-theme/#library-snapshots","title":"Library Snapshots","text":"<p>Snapshots of the current development version of this library are available, which track the latest commit. See here for more information on how to use them.</p>"},{"location":"appcompat-theme/#contributions","title":"Contributions","text":"<p>Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.</p>"},{"location":"appcompat-theme/#license","title":"License","text":"<pre><code>Copyright 2020 The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"contributing/","title":"How to Contribute","text":"<p>We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow.</p>"},{"location":"contributing/#new-featureslibraries","title":"New Features/Libraries","text":"<p>Before contributing large new features and/or libraries please start a discussion  with us first via GitHub Issues and check that we can support it. We are unable to support all new features, even though we wish we could! If we  are unable to support adding your feature, we always encourage you to open source it  in your own repository to help the Compose community grow.</p>"},{"location":"contributing/#contributor-license-agreement","title":"Contributor License Agreement","text":"<p>Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution, this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://cla.developers.google.com/ to see your current agreements on file or to sign a new one.</p> <p>You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again.</p>"},{"location":"contributing/#code-reviews","title":"Code Reviews","text":"<p>All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.</p>"},{"location":"contributing/#api-changes","title":"API Changes","text":"<p>If you are changing any public APIs, you need to run <code>./gradlew metalavaGenerateSignatureRelease</code> which will  update the API signatures.</p>"},{"location":"contributing/#formatting","title":"Formatting","text":"<p>To apply formatting, we use spotless. Run <code>./gradlew :pager:spotlessApply</code> to format the code according  to the spec.</p>"},{"location":"drawablepainter/","title":"Drawable Painter","text":"<p>A library which provides a way to use Android drawables as Jetpack Compose Painters.</p> <p>This library attempts to support most Drawable configuration, as well as Animatable drawables, such as AnimatedVectorDrawable.</p>"},{"location":"drawablepainter/#usage","title":"Usage","text":"<pre><code>@Composable\nfun DrawDrawable() {\n    val drawable = AppCompatResources.getDrawable(LocalContext.current, R.drawable.rectangle)\n\n    Image(\n        painter = rememberDrawablePainter(drawable = drawable),\n        contentDescription = \"content description\",\n    )\n}\n</code></pre>"},{"location":"drawablepainter/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-drawablepainter:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"migration/","title":"Migration from dev.chrisbanes.accompanist","text":"<p>In March 2021, the Accompanist project moved from github.com/chrisbanes/accompanist to github.com/google/accompanist. At the same time we migrated the libraries over to a new package name and Maven group ID.</p> <p>As a summary:</p> <ul> <li>All code was refactored from the <code>dev.chrisbanes.accompanist</code> root package to <code>com.google.accompanist</code> package.</li> <li>The Maven group ID was changed from <code>dev.chrisbanes.accompanist</code> to <code>com.google.accompanist</code>.</li> </ul>"},{"location":"migration/#semi-automatic-migration","title":"Semi-automatic migration...","text":"<p>The following methods below are available for your information only, but may help if you need to migrate from the old package name. </p> <p>Warning</p> <p>Use these at your own risk, but they have worked on multiple projects from my testing. It's a good idea to make sure that you've made a backup or committed any changes before running these.</p>"},{"location":"migration/#android-studio-intellij","title":"Android Studio / IntelliJ","text":"<p>You can use the Replace in Path pane (\u21e7\u2318R on Mac) in Android Studio to do a project-wide search and replace.</p> <p></p> <ul> <li>Find query: <code>dev.chrisbanes.accompanist</code></li> <li>Replace string: <code>com.google.accompanist</code></li> <li>Optional: Set the file mask to <code>*.kt</code> so that only Kotlin files are searched. Repeat for <code>*.gradle</code>.</li> </ul> <p>Similar can be achieved in Visual Studio Code. Other IDEs / text editors are available.</p>"},{"location":"migration/#yolo-commands","title":"YOLO commands","text":"<p>These commands while automatically replace any imports and Gradle dependencies for the project in the current directory.</p>"},{"location":"migration/#macos","title":"MacOS","text":"<pre><code>find . -type f \\( -name '*.kt' -or -name '*.gradle*' \\) \\\n    -exec sed -i '' 's/dev\\.chrisbanes\\.accompanist/com\\.google\\.accompanist/' {} \\;\n</code></pre>"},{"location":"migration/#linux","title":"Linux","text":"<pre><code>find . -type f \\( -name '*.kt' -or -name '*.gradle*' \\) \\\n    -exec sed -i 's/dev\\.chrisbanes\\.accompanist/com\\.google\\.accompanist/' {} \\;\n</code></pre>"},{"location":"navigation-animation/","title":"Jetpack Navigation Compose Animation","text":"<p>A library which provides Compose Animation support for Jetpack Navigation Compose.</p> <p>Warning</p> <p>This library is deprecated, with official navigation-compose support in androidx.navigation.compose. The original documentation is below the migration guide.</p>"},{"location":"navigation-animation/#migration","title":"Migration","text":"<p>The official <code>androidx.navigation.compose</code> version 2.7.0-alpha01+ offers all of the same functionality as Accompanist Navigation Animation.</p> <ol> <li>Make sure you are using Compose 1.5.0-beta01+ before migrating to <code>androidx.navigation.compose</code>.</li> <li>Replace dependency <code>com.google.accompanist:accompanist-navigation-animation:&lt;version&gt;</code> with <code>androidx.navigation:navigation-compose:&lt;version&gt;</code></li> <li>Replace <code>rememberAnimatedNavController</code> with <code>rememberNavController</code> and change import to <code>androidx.navigation.compose.rememberNavController</code></li> <li>Replace <code>AnimatedNavHost</code> with <code>NavHost</code> and change import to <code>androidx.navigation.compose.NavHost</code></li> <li>Replace <code>AnimatedComposeNavigator</code> with <code>ComposeNavigator</code> and change import to <code>androidx.navigation.compose.ComposeNavigator</code></li> <li>Replace <code>AnimatedComposeNavigator()</code> constructor with <code>ComposeNavigator()</code> constructor</li> <li>Replace <code>AnimatedComposeNavigator.Destination</code> with <code>ComposeNavigator.Destination</code></li> <li>Change import for composable from <code>com.google.accompanist.navigation.animation.composable</code> to <code>androidx.navigation.compose.composable</code></li> <li>Change import for navigation from <code>com.google.accompanist.navigation.animation.navigation</code> to <code>androidx.navigation.compose.navigation</code></li> </ol>"},{"location":"navigation-animation/#migration-table","title":"Migration Table","text":"<p>The following is a mapping of Navigation classes and functions from accompanist to androidx.compose:</p> accompanist navigation-animation androidx.navigation.compose <code>AnimatedNavHost</code> <code>NavHost</code> <code>AnimatedComposeNavigator</code> <code>ComposeNavigator</code> <code>AnimatedComposeNavigator.Destination</code> <code>ComposeNavigator.Destination</code> <code>rememberAnimatedNavController()</code> <code>rememberNavController()</code> <code>NavGraphBuilder.composable()</code> <code>NavGraphBuilder.composable()</code> <code>NavGraphBuilder.navigation()</code> <code>NavGraphBuilder.navigation()</code> <p>Of note, ComposeNavigation.Destination allows use of <code>AnimatedContentScope</code> instead of just <code>AnimatedVisibilityScope</code>.</p>"},{"location":"navigation-animation/#deprecated-guidance-for-accompanist-navigation","title":"Deprecated Guidance for Accompanist Navigation","text":"<p>The following is the deprecated guide for using Navigation in Accompanist. Please see above migration section for how to use the <code>androidx.navigation.compose</code> Navigation.</p>"},{"location":"navigation-animation/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-navigation-animation:&lt;version&gt;\"\n}\n</code></pre> <p>Follow the steps below to either add Jetpack Navigation Compose to your app, or to migrate an existing Jetpack Navigation Compose implementation.</p>"},{"location":"navigation-animation/#usage","title":"Usage","text":"<p>The <code>AnimatedNavHost</code> composable offers a way to add custom transitions to composables in Navigation Compose via parameters that can be attached to either an individual <code>composable</code> destination, a <code>navigation</code> element, or to the <code>AnimatedNavHost</code> itself.</p> <p>Each lambda has an <code>AnimatedContentScope&lt;NavBackStackEntry&gt;</code> receiver scope that allows you to use special transitions (such as <code>slideIntoContainer</code> and <code>slideOutOfContainer</code>) and gives you access to the <code>initialState</code> and <code>targetState</code> properties that let you customize what transitions are run based on what screen you are transitioning from (the <code>initialState</code>) and transitioning to (the <code>targetState</code>). </p> <ul> <li><code>enterTransition</code> controls what <code>EnterTransition</code> is run when the <code>targetState</code> <code>NavBackStackEntry</code> is appearing on the screen.</li> <li><code>exitTransition</code> controls what <code>ExitTransition</code> is run when the <code>initialState</code> <code>NavBackStackEntry</code> is disappearing from the screen.</li> <li><code>popEnterTransition</code> defaults to <code>enterTransition</code>, but can be overridden to provide a separate <code>EnterTransition</code> when the <code>targetState</code> <code>NavBackStackEntry</code> is appearing on the screen due to a pop operation (i.e., <code>popBackStack()</code>).</li> <li><code>popExitTransition</code> defaults to <code>exitTransition</code>, but can be overridden to provide a separate <code>ExitTransition</code> when the <code>initialState</code> <code>NavBackStackEntry</code> is disappearing from the screen due to a pop operation (i.e., <code>popBackStack()</code>).</li> </ul> <p>For each transition, if a <code>composable</code> destination returns <code>null</code>, the parent <code>navigation</code> element's transition will be used, thus allowing you to set a global set of transitions at the navigation graph level that will apply to every <code>composable</code> in that graph. This continues up the hierarchy until you reach the root <code>AnimatedNavHost</code>, which controls the global transitions for all destinations and nested graphs that do not specify one.</p> <p>Note: this means that if a destination wants to instantly jump cut between destinations, it should return <code>EnterTransition.None</code> or <code>ExitTransition.None</code> to signify that no transition should be run, rather than return <code>null</code>.</p> <pre><code>@Composable\nprivate fun ExperimentalAnimationNav() {\n    val navController = rememberAnimatedNavController()\n    AnimatedNavHost(navController, startDestination = \"Blue\") {\n        composable(\n            \"Blue\",\n            enterTransition = {\n                when (initialState.destination.route) {\n                    \"Red\" -&gt;\n                        slideIntoContainer(AnimatedContentScope.SlideDirection.Left, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            },\n            exitTransition = {\n                when (targetState.destination.route) {\n                    \"Red\" -&gt;\n                        slideOutOfContainer(AnimatedContentScope.SlideDirection.Left, animationSpec = tween(700))\n                     else -&gt; null\n                }\n            },\n            popEnterTransition = {\n                            when (initialState.destination.route) {\n                                \"Red\" -&gt;\n                                    slideIntoContainer(AnimatedContentScope.SlideDirection.Right, animationSpec = tween(700))\n                                else -&gt; null\n                            }\n                        },\n            popExitTransition = {\n                when (targetState.destination.route) {\n                    \"Red\" -&gt;\n                        slideOutOfContainer(AnimatedContentScope.SlideDirection.Right, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            }\n        ) { BlueScreen(navController) }\n        composable(\n            \"Red\",\n            enterTransition = {\n                when (initialState.destination.route) {\n                    \"Blue\" -&gt;\n                        slideIntoContainer(AnimatedContentScope.SlideDirection.Left, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            },\n            exitTransition = {\n                when (targetState.destination.route) {\n                    \"Blue\" -&gt;\n                        slideOutOfContainer(AnimatedContentScope.SlideDirection.Left, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            },\n            popEnterTransition = {\n                when (initialState.destination.route) {\n                    \"Blue\" -&gt;\n                        slideIntoContainer(AnimatedContentScope.SlideDirection.Right, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            },\n            popExitTransition = {\n                when (targetState.destination.route) {\n                    \"Blue\" -&gt;\n                        slideOutOfContainer(AnimatedContentScope.SlideDirection.Right, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            }\n        ) { RedScreen(navController) }\n    }\n}\n</code></pre> <p>For more examples, refer to the samples.</p>"},{"location":"navigation-animation/#migration_1","title":"Migration","text":"<p>To migrate from using the Navigation Compose APIs do the following:</p> <ul> <li>Replace <code>rememberNavController()</code> with <code>rememberAnimatedNavController()</code></li> <li>Replace <code>NavHost</code> with <code>AnimatedNavHost</code></li> <li>Replace <code>import androidx.navigation.compose.navigation</code> with <code>import com.google.accompanist.navigation.animation.navigation</code></li> <li>Replace <code>import androidx.navigation.compose.composable</code> with <code>import com.google.accompanist.navigation.animation.composable</code></li> </ul> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p> <p>For more details see Animations in Navigation Compose</p>"},{"location":"navigation-material/","title":"Jetpack Navigation Compose Material","text":"<p>A library which provides Compose Material support for Jetpack Navigation Compose. This features composable bottom sheet destinations.</p> <p>Warning</p> <p>This library is deprecated, with official material-navigation support in androidx.compose.material.navigation. The original documentation is below the migration guide.</p>"},{"location":"navigation-material/#migration","title":"Migration","text":"<p>The official <code>androidx.compose.material.navigation</code> version 1.7.0-alpha04+ offers all of the same functionality as Accompanist Navigation Material.</p> <p>All class names are the same, the only needed changes are import related.</p> <ol> <li>Replace dependency <code>com.google.accompanist:accompanist-navigation-material:&lt;version&gt;</code> with <code>androidx.compose.material:material-navigation:&lt;version&gt;</code></li> <li>Change import for ModalBottomSheetLayout from <code>com.google.accompanist.navigation.material.ModalBottomSheetLayout</code> to <code>androidx.compose.material.navigation.ModalBottomSheetLayout</code></li> <li>Change import for bottomSheet from <code>com.google.accompanist.navigation.material.bottomSheet</code> to <code>androidx.compose.material.navigation.bottomSheet</code></li> <li>Change import for rememberBottomSheetNavigator from <code>com.google.accompanist.navigation.material.rememberBottomSheetNavigator</code> to <code>androidx.compose.material.navigation.rememberBottomSheetNavigator</code></li> <li>Change import for BottomSheetNavigator from <code>com.google.accompanist.navigation.material.BottomSheetNavigator</code> to <code>androidx.compose.material.navigation.BottomSheetNavigator</code></li> <li>Change import for BottomSheetNavigatorSheetState from <code>com.google.accompanist.navigation.material.BottomSheetNavigatorSheetState</code> to <code>androidx.compose.material.navigation.BottomSheetNavigatorSheetState</code></li> </ol>"},{"location":"navigation-material/#deprecated-guidance-for-accompanist-navigation-material","title":"Deprecated Guidance for Accompanist Navigation Material","text":"<p>The following is the deprecated guide for using Navigation Material in Accompanist. Please see above migration section for how to use the <code>androidx.compose.material.navigation</code> Material Navigation.</p>"},{"location":"navigation-material/#usage","title":"Usage","text":""},{"location":"navigation-material/#bottom-sheet-destinations","title":"Bottom Sheet Destinations","text":"<ol> <li> <p>Create a <code>BottomSheetNavigator</code> and add it to the <code>NavController</code>:</p> <pre><code>@Composable\nfun MyApp() {\n    val bottomSheetNavigator = rememberBottomSheetNavigator()\n    val navController = rememberNavController(bottomSheetNavigator)\n}\n</code></pre> </li> <li> <p>Wrap your <code>NavHost</code> in the <code>ModalBottomSheetLayout</code> composable that accepts a <code>BottomSheetNavigator</code>.</p> <pre><code>@Composable\nfun MyApp() {\n    val bottomSheetNavigator = rememberBottomSheetNavigator()\n    val navController = rememberNavController(bottomSheetNavigator)\n    ModalBottomSheetLayout(bottomSheetNavigator) {\n        NavHost(navController, \"home\") {\n           // We'll define our graph here in a bit!\n        }\n    }\n}\n</code></pre> </li> <li> <p>Register a bottom sheet destination</p> <pre><code>@Composable\nfun MyApp() {\n    val bottomSheetNavigator = rememberBottomSheetNavigator()\n    val navController = rememberNavController(bottomSheetNavigator)\n    ModalBottomSheetLayout(bottomSheetNavigator) {\n        NavHost(navController, \"home\") {\n           composable(route = \"home\") {\n               ...\n           }\n           bottomSheet(route = \"sheet\") {\n               Text(\"This is a cool bottom sheet!\")\n           }\n        }\n    }\n}\n</code></pre> </li> </ol> <p>For more examples, refer to the samples.</p>"},{"location":"navigation-material/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-navigation-material:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"permissions/","title":"Jetpack Compose Permissions","text":"<p>A library which provides Android runtime permissions support for Jetpack Compose.</p> <p>Warning</p> <p>The permission APIs are currently experimental and they could change at any time. All of the APIs are marked with the <code>@ExperimentalPermissionsApi</code> annotation.</p>"},{"location":"permissions/#usage","title":"Usage","text":""},{"location":"permissions/#rememberpermissionstate-and-remembermultiplepermissionsstate-apis","title":"<code>rememberPermissionState</code> and <code>rememberMultiplePermissionsState</code> APIs","text":"<p>The <code>rememberPermissionState(permission: String)</code> API allows you to request a certain permission to the user and check for the status of the permission. <code>rememberMultiplePermissionsState(permissions: List&lt;String&gt;)</code> offers the same but for multiple permissions at the same time.</p> <p>Both APIs expose properties for you to follow the workflow as described in the permissions documentation.</p> <p>Caution</p> <p>The call to the method that requests the permission to the user (e.g. <code>PermissionState.launchPermissionRequest()</code>) needs to be invoked from a non-composable scope. For example, from a side-effect or from a non-composable callback such as a <code>Button</code>'s <code>onClick</code> lambda.</p> <p>The following code exercises the permission request workflow.</p> <pre><code>@OptIn(ExperimentalPermissionsApi::class)\n@Composable\nprivate fun FeatureThatRequiresCameraPermission() {\n\n    // Camera permission state\n    val cameraPermissionState = rememberPermissionState(\n        android.Manifest.permission.CAMERA\n    )\n\n    if (cameraPermissionState.status.isGranted) {\n        Text(\"Camera permission Granted\")\n    } else {\n        Column {\n            val textToShow = if (cameraPermissionState.status.shouldShowRationale) {\n                // If the user has denied the permission but the rationale can be shown,\n                // then gently explain why the app requires this permission\n                \"The camera is important for this app. Please grant the permission.\"\n            } else {\n                // If it's the first time the user lands on this feature, or the user\n                // doesn't want to be asked again for this permission, explain that the\n                // permission is required\n                \"Camera permission required for this feature to be available. \" +\n                    \"Please grant the permission\"\n            }\n            Text(textToShow)\n            Button(onClick = { cameraPermissionState.launchPermissionRequest() }) {\n                Text(\"Request permission\")\n            }\n        }\n    }\n}\n</code></pre> <p>For more examples, refer to the samples.</p>"},{"location":"permissions/#limitations","title":"Limitations","text":"<p>This permissions wrapper is built on top of the available Android platform APIs. We cannot extend the platform's capabilities. For example, it's not possible to differentiate between the it's the first time requesting the permission vs the user doesn't want to be asked again use cases.</p>"},{"location":"permissions/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-permissions:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"systemuicontroller/","title":"System UI Controller for Jetpack Compose","text":"<p>Warning</p> <p>This library is deprecated, and the API is no longer maintained. We recommend forking the implementation and customising it to your needs. The original documentation is below.</p>"},{"location":"systemuicontroller/#migration","title":"Migration","text":"<p>Recommendation: If you were using SystemUIController to go edge-to-edge in your activity and change the system bar colors and system bar icon colors, use the new Activity.enableEdgeToEdge method available in androidx.activity 1.8.0-alpha03 and later. This method backports the scrims used on some versions of Android. This is a sample PR of the migration to the new method and removing the dependency on SystemUIController in Now in Android.</p> <p>For other usages, migrate to using WindowInsetsControllerCompat or window APIs directly.</p>"},{"location":"systemuicontroller/#original-documentation","title":"Original Documentation","text":"<p>System UI Controller provides easy-to-use utilities for updating the System UI bar colors within Jetpack Compose.</p>"},{"location":"systemuicontroller/#usage","title":"Usage","text":"<p>To control the system UI in your composables, you need to get a <code>SystemUiController</code> instance. The library provides the <code>rememberSystemUiController()</code> function which returns an instance for the current system (currently only Android).</p> <p>In your layouts you can update the system bar colors like so:</p> <pre><code>// Remember a SystemUiController\nval systemUiController = rememberSystemUiController()\nval useDarkIcons = !isSystemInDarkTheme()\n\nDisposableEffect(systemUiController, useDarkIcons) {\n    // Update all of the system bar colors to be transparent, and use\n    // dark icons if we're in light theme\n    systemUiController.setSystemBarsColor(\n        color = Color.Transparent,\n        darkIcons = useDarkIcons\n    )\n\n    // setStatusBarColor() and setNavigationBarColor() also exist\n\n    onDispose {}\n}\n</code></pre>"},{"location":"systemuicontroller/#system-bar-icon-colors","title":"System bar icon colors","text":"<p>The library automatically handles API level differences when running on Android devices. If we look at the example of status bar icons, Android only natively supports dark icons on API 23+. This library handles this by automatically altering the requested color with a scrim, to maintain contrast:</p> <p></p> <p>Similar happens on navigation bar color, which is only available on API 26+.</p>"},{"location":"systemuicontroller/#modifying-scrim-logic","title":"Modifying scrim logic","text":"<p>The scrim logic can be modified if needed:</p> <pre><code>systemUiController.setStatusBarColor(\n    color = Color.Transparent,\n    darkIcons = true\n) { requestedColor -&gt;\n    // TODO: return a darkened color to be used when the system doesn't\n    // natively support dark icons\n}\n</code></pre>"},{"location":"systemuicontroller/#samples","title":"Samples","text":"<p>For complete samples, check out the Insets samples which all use <code>SystemUiController</code> to set transparent system bars.</p>"},{"location":"systemuicontroller/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-systemuicontroller:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"updating/","title":"Updating &amp; releasing Accompanist","text":"<p>This doc is mostly for maintainers.</p>"},{"location":"updating/#new-features-bugfixes","title":"New features &amp; bugfixes","text":"<p>All new features should be uploaded as PRs against the <code>main</code> branch. </p> <p>Once merged into <code>main</code>, they will be automatically merged into the <code>snapshot</code> branch.</p>"},{"location":"updating/#jetpack-compose-snapshots","title":"Jetpack Compose Snapshots","text":"<p>We publish snapshot versions of Accompanist, which depend on a <code>SNAPSHOT</code> versions of Jetpack Compose. These are built from the <code>snapshot</code> branch.</p>"},{"location":"updating/#updating-to-a-newer-compose-snapshot","title":"Updating to a newer Compose snapshot","text":"<p>As mentioned above, updating to a new Compose snapshot is done by submitting a new PR against the <code>snapshot</code> branch:</p> <pre><code>git checkout snapshot &amp;&amp; git pull\n# Create branch for PR\ngit checkout -b update_snapshot\n</code></pre> <p>Now edit the project to depend on the new Compose SNAPSHOT version:</p> <p>Edit <code>/gradle/libs.versions.toml</code>:</p> <p>Under <code>[versions]</code>:</p> <ol> <li>Update the <code>composesnapshot</code> property to be the snapshot number</li> <li>Ensure that the <code>compose</code> property is correct</li> </ol> <p>Make sure the project builds and test pass: <pre><code>./gradlew check\n</code></pre></p> <p>Now <code>git commit</code> the changes and push to GitHub.</p> <p>Finally create a PR (with the base branch as <code>snapshot</code>) and send for review.</p>"},{"location":"updating/#releasing","title":"Releasing","text":"<p>Once the next Jetpack Compose version is out, we're ready to push a new release:</p>"},{"location":"updating/#1-merge-snapshot-into-main","title":"#1: Merge <code>snapshot</code> into <code>main</code>","text":"<p>First we merge the <code>snapshot</code> branch into <code>main</code>:</p> <pre><code>git checkout snapshot &amp;&amp; git pull\ngit checkout main &amp;&amp; git pull\n\n# Create branch for PR\ngit checkout -b main_snapshot_merge\n\n# Merge in the snapshot branch\ngit merge snapshot\n</code></pre>"},{"location":"updating/#2-update-dependencies","title":"#2: Update dependencies","text":"<p>Edit <code>/gradle/libs.versions.toml</code>:</p> <p>Under <code>[versions]</code>:</p> <ol> <li>Update the <code>composesnapshot</code> property to a single character (usually <code>-</code>). This disables the snapshot repository.</li> <li>Update the <code>compose</code> property to match the new release (i.e. <code>1.0.0-beta06</code>)</li> </ol> <p>Make sure the project builds and test pass: <pre><code>./gradlew check\n</code></pre></p> <p>Commit the changes.</p>"},{"location":"updating/#3-bump-the-version-number","title":"#3: Bump the version number","text":"<p>Edit gradle.properties:</p> <ul> <li>Update the <code>VERSION_NAME</code> property and remove the <code>-SNAPSHOT</code> suffix.</li> </ul> <p>Commit the changes, using the commit message containing the new version name.</p>"},{"location":"updating/#4-push-to-github","title":"#4: Push to GitHub","text":"<p>Push the branch to GitHub and create a PR against the <code>main</code> branch, and send for review. Once approved and merged, it will be automatically deployed to Maven Central.</p>"},{"location":"updating/#5-create-release","title":"#5: Create release","text":"<p>Once the above PR has been approved and merged, we need to create the GitHub release:</p> <ul> <li>Open up the Releases page.</li> <li>At the top you should see a 'Draft' release, auto populated with any PRs since the last release. Click 'Edit'.</li> <li>Make sure that the version number matches what we released (the tool guesses but is not always correct).</li> <li>Double check everything, then press 'Publish release'.</li> </ul> <p>At this point the release is published. This will trigger the docs action to run, which will auto-deploy a new version of the website.</p>"},{"location":"updating/#6-prepare-the-next-development-version","title":"#6: Prepare the next development version","text":"<p>The current release is now finished, but we need to update the version for the next development version:</p> <p>Edit gradle.properties:</p> <ul> <li>Update the <code>VERSION_NAME</code> property, by increasing the version number, and adding the <code>-SNAPSHOT</code> suffix.</li> <li>Example: released version: <code>0.3.0</code>. Update to <code>0.3.1-SNAPSHOT</code></li> </ul> <p><code>git commit</code> and push to <code>main</code>.</p> <p>Finally, merge all of these changes back to <code>snapshot</code>:</p> <pre><code>git checkout snapshot &amp;&amp; git pull\ngit merge main\ngit push\n</code></pre>"},{"location":"using-snapshot-version/","title":"Using a Snapshot Version of the Library","text":"<p>If you would like to depend on the cutting edge version of the Accompanist library, you can use the snapshot versions that are published to Sonatype OSSRH's snapshot repository. These are updated on every commit to <code>main</code>.</p> <p>To do so:</p> <pre><code>repositories {\n    // ...\n    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }\n}\n\ndependencies {\n    // Check the latest SNAPSHOT version from the link above\n    classpath 'com.google.accompanist:accompanist-coil:XXX-SNAPSHOT'\n}\n</code></pre> <p>You might see a number of different versioned snapshots. If we use an example:</p> <ul> <li><code>0.3.0-SNAPSHOT</code> is a build from the <code>main</code> branch, and depends on the latest tagged Jetpack Compose release (i.e. alpha03).</li> <li><code>0.3.0.compose-6574163-SNAPSHOT</code> is a build from the <code>snapshot</code> branch. This depends on the SNAPSHOT build of Jetpack Compose from build <code>6574163</code>. You should only use these if you are using Jetpack Compose snapshot versions (see below).</li> </ul>"},{"location":"using-snapshot-version/#using-jetpack-compose-snapshots","title":"Using Jetpack Compose Snapshots","text":"<p>If you're using <code>SNAPSHOT</code> versions of the <code>androidx.compose</code> libraries, you might run into issues with the current stable Accompanist release forcing an older version of those libraries.</p> <p>We publish snapshot versions of Accompanist which depend on recent Jetpack Compose SNAPSHOT repositories. To find a recent build, look through the snapshot repository for any versions in the scheme <code>x.x.x.compose-YYYY-SNAPSHOT</code> (for example: <code>0.3.0.compose-6574163-SNAPSHOT</code>). The <code>YYYY</code> in the scheme is the snapshot build being used from AndroidX (from the example: build <code>6574163</code>). You can then use it like so:</p> <pre><code>repositories {\n    // ...\n    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }\n}\n\ndependencies {\n    // Check the latest SNAPSHOT version from the link above\n    classpath 'com.google.accompanist:accompanist-coil:XXXX.compose-YYYYY-SNAPSHOT'\n}\n</code></pre> <p>These builds are updated regularly, but there's no guarantee that we will create one for a given snapshot number.</p> <p>Note: you might also see versions in the scheme <code>x.x.x.ui-YYYY-SNAPSHOT</code>. These are the same, just using an older suffix.</p>"},{"location":"web/","title":"WebView wrapper for Jetpack Compose","text":"<p>A library which provides a Jetpack Compose wrapper around Android's WebView.</p> <p>Warning</p> <p>This library is deprecated, and the API is no longer maintained. We recommend forking the implementation and customising it to your needs. The original documentation is below.</p>"},{"location":"web/#usage","title":"Usage","text":"<p>To implement this wrapper there are two key APIs which are needed: <code>WebView</code>, which is provides the layout, and <code>rememberWebViewState(url)</code> which provides some remembered state including the URL to display.</p> <p>The basic usage is as follows:</p> <pre><code>val state = rememberWebViewState(\"https://example.com\")\n\nWebView(\n    state\n)\n</code></pre> <p>This will display a WebView in your Compose layout that shows the URL provided.</p> <p>There is a larger sample in the sample app which can be found here. This sample also shows how to show a loading state.</p>"},{"location":"web/#webview-settings-including-javascript","title":"WebView settings including JavaScript","text":"<p>By default, JavaScript is disabled in the WebView. To enable it or any other settings you can use the <code>onCreated</code> callback.</p> <pre><code>WebView(\n    state = webViewState,\n    onCreated = { it.settings.javaScriptEnabled = true }\n)\n</code></pre>"},{"location":"web/#capturing-back-presses","title":"Capturing back presses","text":"<p>By default the WebView will capture back presses/swipes when relevant and navigate the WebView back. This can be disabled via the parameter on  the Composable.</p> <pre><code>WebView(\n    ...\n    captureBackPresses = false\n)\n</code></pre>"},{"location":"web/#using-a-subclass-of-webview","title":"Using a subclass of WebView","text":"<p>If you want to use a subclass of <code>WebView</code>, or simply require more control over its instantiation, you can provide a factory.</p> <pre><code>WebView(\n    ...\n    factory = { context -&gt; CustomWebView(context) }\n)\n</code></pre>"},{"location":"web/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-webview:&lt;version&gt;\"\n}\n</code></pre>"}]}
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"USDS: A Base Layer of Stability for the Autonomous Economy","text":"<p>USDS is a non-custodial, algorithmic digital asset designed to serve as a foundational layer of stability within the autonomous economy. Built on the Solana blockchain, USDS aims to provide a fast, secure, and reliable medium for decentralized financial applications.</p>"},{"location":"#what-is-usds","title":"\ud83c\udf10 What is USDS?","text":"<p>USDS is engineered to function as a programmable and autonomous financial primitive, moving beyond traditional stablecoin models. Its key characteristics include:</p> <ul> <li>Non-custodial: Users retain full control over their assets without relying on intermediaries.</li> <li>Algorithmic Equilibrium: Supply adjusts automatically in response to market dynamics, eliminating the need for manual intervention or collateral reserves.</li> <li>High-Speed Transactions: Leveraging Solana's infrastructure for rapid and scalable operations.</li> </ul>"},{"location":"#core-principles","title":"\u2699\ufe0f Core Principles","text":""},{"location":"#elastic-monetary-base","title":"Elastic Monetary Base","text":"<p>USDS dynamically expands and contracts its supply based on real-time market signals, ensuring stability without the need for centralized control or asset backing.</p>"},{"location":"#impartial-infrastructure","title":"Impartial Infrastructure","text":"<p>Governed entirely by transparent, on-chain logic, USDS operates as a trustless system free from human bias, providing a neutral foundation for decentralized applications.</p>"},{"location":"#verifiably-trustless","title":"Verifiably Trustless","text":"<p>All operational rules are hard-coded and enforced automatically on-chain, offering an auditable and immutable framework that replaces traditional trust mechanisms with code.</p>"},{"location":"#technical-architecture","title":"\ud83e\udde0 Technical Architecture","text":"<p>USDS introduces several innovations to enhance precision and efficiency:</p> <ul> <li>Global State Synchronization: Achieves millisecond-level updates across the network for seamless state consistency.</li> <li>Parallel Execution: Processes multiple operations concurrently to maximize throughput.</li> <li>Micro-Fees: Enables granular and low-cost transactions, facilitating a wide range of financial activities.</li> </ul>"},{"location":"#connecting-value-across-ecosystems","title":"\ud83d\udd17 Connecting Value Across Ecosystems","text":"<p>USDS is designed to integrate seamlessly with various decentralized platforms:</p> <ul> <li>Sovereign Medium of Account: Serves as a native unit of value for decentralized protocols.</li> <li>Modular Unit of Settlement: Facilitates transactions across diverse DeFi architectures.</li> <li>Coordination Substrate: Acts as a foundational layer for autonomous agents and decentralized autonomous organizations (DAOs).</li> </ul>"},{"location":"#learn-more","title":"\ud83d\udcd6 Learn More","text":"<p>Explore the following sections for a deeper understanding of USDS:</p> <ul> <li>Thesis: In-depth exploration of USDS's vision and design philosophy.</li> <li>Audit: Detailed information on the protocol's security and operational integrity.</li> <li>Blog: Updates, insights, and discussions related to USDS and the broader decentralized economy.</li> </ul> <p>For more information, visit the USDS website.</p>"},{"location":"adaptive/","title":"Adaptive utilities for Jetpack Compose","text":"<p>A library providing a collection of utilities for adaptive layouts.</p>"},{"location":"adaptive/#calculatedisplayfeatures","title":"calculateDisplayFeatures","text":"<p><code>calculateDisplayFeatures(activity)</code> returns the current list of <code>DisplayFeature</code>s, as reported by the Jetpack WindowManager library.</p> <p>These contain the list of folds (if any), and can be used to drive components like <code>TwoPane</code>.</p>"},{"location":"adaptive/#twopane","title":"TwoPane","text":"<p><code>TwoPane</code> is a UI component that positions exactly two slots on the screen.</p> <p>The default positioning of these two slots is driven by a <code>TwoPaneStrategy</code>, which can decide to orient the two slots side-by-side horizontally or vertically, and also configure the gap between them.</p> <p>The built-in <code>HorizontalTwoPaneStrategy</code> and <code>VerticalTwoPaneStrategy</code> allow positioning the slots based on a fixed offset, or as some fraction of the space.</p> <p><code>TwoPane</code> also requires a list of display features (to be retrieved with <code>calculateDisplayFeatures</code>), and optionally a <code>FoldAwareConfiguration</code> to determine which folds to handle automatically.</p> <p>When there is a fold that intersects with the <code>TwoPane</code> component that is obscuring or separating, the <code>TwoPane</code> will automatically place the slots to avoid the fold.</p> <p>When there is no fold, the default supplied strategy will be used instead.</p>"},{"location":"adaptive/#foldawarecolumn","title":"FoldAwareColumn","text":"<p><code>FoldAwareColumn</code> is a simplified version of Column that places children in a fold-aware manner.</p> <p><code>FoldAwareColumn</code> requires a list of display features (to be retrieved with <code>calculateDisplayFeatures</code>) to determine which folds to handle automatically.</p> <p>The built-in <code>foldPadding</code> parameter is zero, and the values of the vertical padding are used in the layout determine how much space should be left around a fold when placing children.</p> <p>When there is a horizontal fold that is obscuring or separating, the layout will begin placing children from the top of the available space. If a child is projected to overlap the fold, then its y-coordinate is increased so it will be placed fully below the fold, as will any other remaining children.</p> <p>When there is no fold, the children will be placed consecutively with no y-coordinate adjustments.</p> <p>Optionally, children can be modified with the <code>ignoreFold()</code> attribute, which means that they will be placed as if no fold is present even if they overlap a fold.</p>"},{"location":"adaptive/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-adaptive:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"appcompat-theme/","title":"AppCompat Compose Theme Adapter","text":"<p>Warning</p> <p>This library is deprecated in favor of the new <code>themeadapter-appcompat</code> artifact. The migration guide and original documentation is below.</p>"},{"location":"appcompat-theme/#migration","title":"Migration","text":"<p>Accompanist AppCompat Theme Adapter has moved from the <code>appcompat-theme</code> artifact to the <code>themeadapter-appcompat</code> artifact. The implementation is identical but the dependency and import package have changed.</p>"},{"location":"appcompat-theme/#migration-steps","title":"Migration steps","text":"<ol> <li>Change the dependency from <code>com.google.accompanist:accompanist-appcompat-theme:&lt;version&gt;</code> to <code>com.google.accompanist:accompanist-themeadapter-appcompat:&lt;version&gt;</code></li> <li>Change any <code>com.google.accompanist.appcompattheme.*</code> imports to <code>com.google.accompanist.themeadapter.appcompat.*</code></li> </ol>"},{"location":"appcompat-theme/#original-docs","title":"Original Docs","text":"<p>A library that enables reuse of AppCompat XML themes for theming in Jetpack Compose.</p> <p>The basis of theming in Jetpack Compose is the <code>MaterialTheme</code> composable, where you provide <code>Colors</code>, <code>Shapes</code> and <code>Typography</code> instances containing your styling parameters:</p> <pre><code>MaterialTheme(\n    typography = type,\n    colors = colors,\n    shapes = shapes\n) {\n    // Surface, Scaffold, etc\n}\n</code></pre> <p>AppCompat XML themes allow for similar but coarser theming via XML theme attributes, like so:</p> <pre><code>&lt;style name=\"Theme.MyApp\" parent=\"Theme.AppCompat.DayNight\"&gt;\n    &lt;item name=\"colorPrimary\"&gt;@color/purple_500&lt;/item&gt;\n    &lt;item name=\"colorAccent\"&gt;@color/green_200&lt;/item&gt;\n&lt;/style&gt;\n</code></pre> <p>This library attempts to bridge the gap between AppCompat XML themes, and themes in Jetpack Compose, allowing your composable <code>MaterialTheme</code> to be based on the <code>Activity</code>'s XML theme:</p> <pre><code>AppCompatTheme {\n    // MaterialTheme.colors, MaterialTheme.shapes, MaterialTheme.typography\n    // will now contain copies of the context's theme\n}\n</code></pre> <p>This is especially handy when you're migrating an existing app, a fragment (or other UI container) at a time.</p> <p>Caution</p> <p>If you are using Material Design Components in your app, you should use the MDC Compose Theme Adapter instead, as it allows much finer-grained reading of your theme.</p>"},{"location":"appcompat-theme/#customizing-the-theme","title":"Customizing the theme","text":"<p>The <code>AppCompatTheme()</code> function will automatically read the host context's AppCompat theme and pass them to <code>MaterialTheme</code> on your behalf, but if you want to customize the generated values, you can do so via the <code>createAppCompatTheme()</code> function:</p> <pre><code>val context = LocalContext.current\nvar (colors, type) = context.createAppCompatTheme()\n\n// Modify colors or type as required. Then pass them\n// through to MaterialTheme...\n\nMaterialTheme(\n    colors = colors,\n    typography = type\n) {\n    // rest of layout\n}\n</code></pre>"},{"location":"appcompat-theme/#generated-theme","title":"Generated theme","text":"<p>Synthesizing a material theme from a <code>Theme.AppCompat</code> theme is not perfect, since <code>Theme.AppCompat</code> does not expose the same level of customization as is available in material theming. Going through the pillars of material theming:</p>"},{"location":"appcompat-theme/#colors","title":"Colors","text":"<p>AppCompat has a limited set of top-level color attributes, which means that <code>AppCompatTheme()</code> has to generate/select alternative colors in certain situations. The mapping is currently:</p> MaterialTheme color AppCompat attribute primary <code>colorPrimary</code> primaryVariant <code>colorPrimaryDark</code> onPrimary Calculated black/white secondary <code>colorAccent</code> secondaryVariant <code>colorAccent</code> onSecondary Calculated black/white surface Default onSurface <code>android:textColorPrimary</code>, else calculated black/white background <code>android:colorBackground</code> onBackground <code>android:textColorPrimary</code>, else calculated black/white error <code>colorError</code> onError Calculated black/white <p>Where the table says \"calculated black/white\", this means either black/white, depending on which provides the greatest contrast against the corresponding background color.</p>"},{"location":"appcompat-theme/#typography","title":"Typography","text":"<p>AppCompat does not provide any semantic text appearances (such as headline6, body1, etc), and instead relies on text appearances for specific widgets or use cases. As such, the only thing we read from an AppCompat theme is the default <code>app:fontFamily</code> or <code>android:fontFamily</code>. For example:</p> <pre><code>&lt;style name=\"Theme.MyApp\" parent=\"Theme.AppCompat\"&gt;\n    &lt;item name=\"fontFamily\"&gt;@font/my_font&lt;/item&gt;\n&lt;/style&gt;\n</code></pre> <p>Compose does not currently support downloadable fonts, so any font referenced from the theme should from your resources. See here for more information.</p>"},{"location":"appcompat-theme/#shape","title":"Shape","text":"<p>AppCompat has no concept of shape theming, therefore we use the default value from <code>MaterialTheme.shapes</code>. If you wish to provide custom values, use the <code>shapes</code> parameter on <code>AppCompatTheme</code>.</p>"},{"location":"appcompat-theme/#limitations","title":"Limitations","text":"<p>There are some known limitations with the implementation at the moment:</p> <ul> <li>This relies on your <code>Activity</code>/<code>Context</code> theme extending one of the <code>Theme.AppCompat</code> themes.</li> <li>Variable fonts are not supported in Compose yet, meaning that the value of <code>android:fontVariationSettings</code> are currently ignored.</li> <li>You can modify the resulting <code>MaterialTheme</code> in Compose as required, but this only works in Compose. Any changes you make will not be reflected in the Activity theme.</li> </ul>"},{"location":"appcompat-theme/#usage","title":"Usage","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-appcompat-theme:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"appcompat-theme/#library-snapshots","title":"Library Snapshots","text":"<p>Snapshots of the current development version of this library are available, which track the latest commit. See here for more information on how to use them.</p>"},{"location":"appcompat-theme/#contributions","title":"Contributions","text":"<p>Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.</p>"},{"location":"appcompat-theme/#license","title":"License","text":"<pre><code>Copyright 2020 The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"audit/","title":"USDS Smart Contract Audit","text":"<p>This page summarizes the findings from the third-party audit of the USDS Protocol (v1.0.0), specifically focusing on the <code>IdentityDepository</code> smart contract, conducted by Genesis IT Lab.</p>"},{"location":"audit/#audit-overview","title":"\ud83d\udd0d Audit Overview","text":"<ul> <li>Auditor: Genesis IT Lab  </li> <li>Date: June 5, 2025  </li> <li>Scope: IdentityDepository (Solana program)  </li> <li>Focus Areas:</li> <li>Redemption logic</li> <li>Authority enforcement</li> <li>Vault routing</li> <li>Arithmetic safety</li> </ul> <p>Note: Mint flow logic and other modules were out of scope for this audit phase.</p>"},{"location":"audit/#key-findings","title":"\u2705 Key Findings","text":"<ul> <li>\u2705 No critical or high-severity vulnerabilities were found</li> <li>\u2705 Signer checks and controller authority are properly enforced</li> <li>\u2705 Vault selection for USDC and USDT is safely routed</li> <li>\u2705 Checked arithmetic prevents overflows</li> <li>\u2705 Redemption follows a secure burn-first, transfer-second model</li> <li>\u26a0\ufe0f Minor informational issues were resolved or acknowledged</li> </ul>"},{"location":"audit/#informational-findings","title":"\ud83d\udcc4 Informational Findings","text":"ID Description Resolution I-1 Correct enforcement of redeem authority through controller Resolved I-2 Sequential, atomic redemption process ensures stability Resolved I-3 Safe dual-vault routing for USDC and USDT Resolved I-4 Overflow/underflow resistance using safe arithmetic Resolved I-5 Input validation before execution Resolved I-6 Decimal check for token mints not enforced at runtime Acknowledged (future improvement)"},{"location":"audit/#methodology","title":"\ud83d\udee0 Methodology","text":"<p>Genesis IT Lab used: - Manual source code inspection - Static analysis tools - Access control review - Smart contract logic validation - Formal security checklist (inspired by OWASP &amp; blockchain standards)</p> <p>Code quality, design modularity, and mathematical integrity were all reviewed against known patterns in Solana smart contract development.</p>"},{"location":"audit/#notable-improvements-post-audit","title":"\ud83e\udde0 Notable Improvements Post-Audit","text":"<ul> <li>Improved signer and controller enforcement</li> <li>Eliminated redundant passthrough accounts</li> <li>Optimized logic for collateral vault management</li> <li>Recommended runtime mint decimal verification</li> </ul>"},{"location":"audit/#about-the-auditor","title":"\ud83c\udfe2 About the Auditor","text":"<p>Genesis IT Lab is a blockchain R&amp;D and security firm specializing in Solana and EVM ecosystems. The team applies rigorous manual review, fuzzing, and formal methods to detect smart contract vulnerabilities.</p> <p>Learn more at genesisitlab.io (placeholder)</p>"},{"location":"audit/#full-audit-report","title":"\ud83d\udcce Full Audit Report","text":"<p>You can download or view the full audit report here:</p> <p>\ud83d\udcc4 View Audit Report (PDF)</p>"},{"location":"drawablepainter/","title":"Drawable Painter","text":"<p>A library which provides a way to use Android drawables as Jetpack Compose Painters.</p> <p>This library attempts to support most Drawable configuration, as well as Animatable drawables, such as AnimatedVectorDrawable.</p>"},{"location":"drawablepainter/#usage","title":"Usage","text":"<pre><code>@Composable\nfun DrawDrawable() {\n    val drawable = AppCompatResources.getDrawable(LocalContext.current, R.drawable.rectangle)\n\n    Image(\n        painter = rememberDrawablePainter(drawable = drawable),\n        contentDescription = \"content description\",\n    )\n}\n</code></pre>"},{"location":"drawablepainter/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-drawablepainter:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"faq/","title":"FAQ \u2013 Frequently Asked Questions","text":""},{"location":"faq/#what-is-usds","title":"What is USDS?","text":"<p>USDS is a non-collateralized stable digital asset designed to be fast, autonomous, and transparent.</p>"},{"location":"faq/#how-does-it-stay-stable","title":"How does it stay stable?","text":"<p>USDS automatically expands or contracts its supply using smart contracts to maintain a $1 target peg.</p>"},{"location":"faq/#is-usds-backed-by-dollars","title":"Is USDS backed by dollars?","text":"<p>No. USDS is algorithmic and not backed by fiat or crypto assets.</p>"},{"location":"faq/#what-makes-usds-different","title":"What makes USDS different?","text":"<ul> <li>Runs 100% on-chain</li> <li>Has no custodians or central controllers</li> <li>Built for integration into autonomous systems</li> </ul>"},{"location":"faq/#can-i-mint-or-redeem-usds","title":"Can I mint or redeem USDS?","text":"<p>Yes, through approved interfaces and smart contracts. Redemption may be delayed or discounted during contractions.</p>"},{"location":"faq/#how-do-i-contribute","title":"How do I contribute?","text":"<p>See Contributing for details on how to help with code, docs, or community.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025 USDS Contributors</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"migration/","title":"Migration from dev.chrisbanes.accompanist","text":"<p>In March 2021, the Accompanist project moved from github.com/chrisbanes/accompanist to github.com/google/accompanist. At the same time we migrated the libraries over to a new package name and Maven group ID.</p> <p>As a summary:</p> <ul> <li>All code was refactored from the <code>dev.chrisbanes.accompanist</code> root package to <code>com.google.accompanist</code> package.</li> <li>The Maven group ID was changed from <code>dev.chrisbanes.accompanist</code> to <code>com.google.accompanist</code>.</li> </ul>"},{"location":"migration/#semi-automatic-migration","title":"Semi-automatic migration...","text":"<p>The following methods below are available for your information only, but may help if you need to migrate from the old package name. </p> <p>Warning</p> <p>Use these at your own risk, but they have worked on multiple projects from my testing. It's a good idea to make sure that you've made a backup or committed any changes before running these.</p>"},{"location":"migration/#android-studio-intellij","title":"Android Studio / IntelliJ","text":"<p>You can use the Replace in Path pane (\u21e7\u2318R on Mac) in Android Studio to do a project-wide search and replace.</p> <p></p> <ul> <li>Find query: <code>dev.chrisbanes.accompanist</code></li> <li>Replace string: <code>com.google.accompanist</code></li> <li>Optional: Set the file mask to <code>*.kt</code> so that only Kotlin files are searched. Repeat for <code>*.gradle</code>.</li> </ul> <p>Similar can be achieved in Visual Studio Code. Other IDEs / text editors are available.</p>"},{"location":"migration/#yolo-commands","title":"YOLO commands","text":"<p>These commands while automatically replace any imports and Gradle dependencies for the project in the current directory.</p>"},{"location":"migration/#macos","title":"MacOS","text":"<pre><code>find . -type f \\( -name '*.kt' -or -name '*.gradle*' \\) \\\n    -exec sed -i '' 's/dev\\.chrisbanes\\.accompanist/com\\.google\\.accompanist/' {} \\;\n</code></pre>"},{"location":"migration/#linux","title":"Linux","text":"<pre><code>find . -type f \\( -name '*.kt' -or -name '*.gradle*' \\) \\\n    -exec sed -i 's/dev\\.chrisbanes\\.accompanist/com\\.google\\.accompanist/' {} \\;\n</code></pre>"},{"location":"navigation-animation/","title":"Jetpack Navigation Compose Animation","text":"<p>A library which provides Compose Animation support for Jetpack Navigation Compose.</p> <p>Warning</p> <p>This library is deprecated, with official navigation-compose support in androidx.navigation.compose. The original documentation is below the migration guide.</p>"},{"location":"navigation-animation/#migration","title":"Migration","text":"<p>The official <code>androidx.navigation.compose</code> version 2.7.0-alpha01+ offers all of the same functionality as Accompanist Navigation Animation.</p> <ol> <li>Make sure you are using Compose 1.5.0-beta01+ before migrating to <code>androidx.navigation.compose</code>.</li> <li>Replace dependency <code>com.google.accompanist:accompanist-navigation-animation:&lt;version&gt;</code> with <code>androidx.navigation:navigation-compose:&lt;version&gt;</code></li> <li>Replace <code>rememberAnimatedNavController</code> with <code>rememberNavController</code> and change import to <code>androidx.navigation.compose.rememberNavController</code></li> <li>Replace <code>AnimatedNavHost</code> with <code>NavHost</code> and change import to <code>androidx.navigation.compose.NavHost</code></li> <li>Replace <code>AnimatedComposeNavigator</code> with <code>ComposeNavigator</code> and change import to <code>androidx.navigation.compose.ComposeNavigator</code></li> <li>Replace <code>AnimatedComposeNavigator()</code> constructor with <code>ComposeNavigator()</code> constructor</li> <li>Replace <code>AnimatedComposeNavigator.Destination</code> with <code>ComposeNavigator.Destination</code></li> <li>Change import for composable from <code>com.google.accompanist.navigation.animation.composable</code> to <code>androidx.navigation.compose.composable</code></li> <li>Change import for navigation from <code>com.google.accompanist.navigation.animation.navigation</code> to <code>androidx.navigation.compose.navigation</code></li> </ol>"},{"location":"navigation-animation/#migration-table","title":"Migration Table","text":"<p>The following is a mapping of Navigation classes and functions from accompanist to androidx.compose:</p> accompanist navigation-animation androidx.navigation.compose <code>AnimatedNavHost</code> <code>NavHost</code> <code>AnimatedComposeNavigator</code> <code>ComposeNavigator</code> <code>AnimatedComposeNavigator.Destination</code> <code>ComposeNavigator.Destination</code> <code>rememberAnimatedNavController()</code> <code>rememberNavController()</code> <code>NavGraphBuilder.composable()</code> <code>NavGraphBuilder.composable()</code> <code>NavGraphBuilder.navigation()</code> <code>NavGraphBuilder.navigation()</code> <p>Of note, ComposeNavigation.Destination allows use of <code>AnimatedContentScope</code> instead of just <code>AnimatedVisibilityScope</code>.</p>"},{"location":"navigation-animation/#deprecated-guidance-for-accompanist-navigation","title":"Deprecated Guidance for Accompanist Navigation","text":"<p>The following is the deprecated guide for using Navigation in Accompanist. Please see above migration section for how to use the <code>androidx.navigation.compose</code> Navigation.</p>"},{"location":"navigation-animation/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-navigation-animation:&lt;version&gt;\"\n}\n</code></pre> <p>Follow the steps below to either add Jetpack Navigation Compose to your app, or to migrate an existing Jetpack Navigation Compose implementation.</p>"},{"location":"navigation-animation/#usage","title":"Usage","text":"<p>The <code>AnimatedNavHost</code> composable offers a way to add custom transitions to composables in Navigation Compose via parameters that can be attached to either an individual <code>composable</code> destination, a <code>navigation</code> element, or to the <code>AnimatedNavHost</code> itself.</p> <p>Each lambda has an <code>AnimatedContentScope&lt;NavBackStackEntry&gt;</code> receiver scope that allows you to use special transitions (such as <code>slideIntoContainer</code> and <code>slideOutOfContainer</code>) and gives you access to the <code>initialState</code> and <code>targetState</code> properties that let you customize what transitions are run based on what screen you are transitioning from (the <code>initialState</code>) and transitioning to (the <code>targetState</code>). </p> <ul> <li><code>enterTransition</code> controls what <code>EnterTransition</code> is run when the <code>targetState</code> <code>NavBackStackEntry</code> is appearing on the screen.</li> <li><code>exitTransition</code> controls what <code>ExitTransition</code> is run when the <code>initialState</code> <code>NavBackStackEntry</code> is disappearing from the screen.</li> <li><code>popEnterTransition</code> defaults to <code>enterTransition</code>, but can be overridden to provide a separate <code>EnterTransition</code> when the <code>targetState</code> <code>NavBackStackEntry</code> is appearing on the screen due to a pop operation (i.e., <code>popBackStack()</code>).</li> <li><code>popExitTransition</code> defaults to <code>exitTransition</code>, but can be overridden to provide a separate <code>ExitTransition</code> when the <code>initialState</code> <code>NavBackStackEntry</code> is disappearing from the screen due to a pop operation (i.e., <code>popBackStack()</code>).</li> </ul> <p>For each transition, if a <code>composable</code> destination returns <code>null</code>, the parent <code>navigation</code> element's transition will be used, thus allowing you to set a global set of transitions at the navigation graph level that will apply to every <code>composable</code> in that graph. This continues up the hierarchy until you reach the root <code>AnimatedNavHost</code>, which controls the global transitions for all destinations and nested graphs that do not specify one.</p> <p>Note: this means that if a destination wants to instantly jump cut between destinations, it should return <code>EnterTransition.None</code> or <code>ExitTransition.None</code> to signify that no transition should be run, rather than return <code>null</code>.</p> <pre><code>@Composable\nprivate fun ExperimentalAnimationNav() {\n    val navController = rememberAnimatedNavController()\n    AnimatedNavHost(navController, startDestination = \"Blue\") {\n        composable(\n            \"Blue\",\n            enterTransition = {\n                when (initialState.destination.route) {\n                    \"Red\" -&gt;\n                        slideIntoContainer(AnimatedContentScope.SlideDirection.Left, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            },\n            exitTransition = {\n                when (targetState.destination.route) {\n                    \"Red\" -&gt;\n                        slideOutOfContainer(AnimatedContentScope.SlideDirection.Left, animationSpec = tween(700))\n                     else -&gt; null\n                }\n            },\n            popEnterTransition = {\n                            when (initialState.destination.route) {\n                                \"Red\" -&gt;\n                                    slideIntoContainer(AnimatedContentScope.SlideDirection.Right, animationSpec = tween(700))\n                                else -&gt; null\n                            }\n                        },\n            popExitTransition = {\n                when (targetState.destination.route) {\n                    \"Red\" -&gt;\n                        slideOutOfContainer(AnimatedContentScope.SlideDirection.Right, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            }\n        ) { BlueScreen(navController) }\n        composable(\n            \"Red\",\n            enterTransition = {\n                when (initialState.destination.route) {\n                    \"Blue\" -&gt;\n                        slideIntoContainer(AnimatedContentScope.SlideDirection.Left, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            },\n            exitTransition = {\n                when (targetState.destination.route) {\n                    \"Blue\" -&gt;\n                        slideOutOfContainer(AnimatedContentScope.SlideDirection.Left, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            },\n            popEnterTransition = {\n                when (initialState.destination.route) {\n                    \"Blue\" -&gt;\n                        slideIntoContainer(AnimatedContentScope.SlideDirection.Right, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            },\n            popExitTransition = {\n                when (targetState.destination.route) {\n                    \"Blue\" -&gt;\n                        slideOutOfContainer(AnimatedContentScope.SlideDirection.Right, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            }\n        ) { RedScreen(navController) }\n    }\n}\n</code></pre> <p>For more examples, refer to the samples.</p>"},{"location":"navigation-animation/#migration_1","title":"Migration","text":"<p>To migrate from using the Navigation Compose APIs do the following:</p> <ul> <li>Replace <code>rememberNavController()</code> with <code>rememberAnimatedNavController()</code></li> <li>Replace <code>NavHost</code> with <code>AnimatedNavHost</code></li> <li>Replace <code>import androidx.navigation.compose.navigation</code> with <code>import com.google.accompanist.navigation.animation.navigation</code></li> <li>Replace <code>import androidx.navigation.compose.composable</code> with <code>import com.google.accompanist.navigation.animation.composable</code></li> </ul> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p> <p>For more details see Animations in Navigation Compose</p>"},{"location":"navigation-material/","title":"Jetpack Navigation Compose Material","text":"<p>A library which provides Compose Material support for Jetpack Navigation Compose. This features composable bottom sheet destinations.</p> <p>Warning</p> <p>This library is deprecated, with official material-navigation support in androidx.compose.material.navigation. The original documentation is below the migration guide.</p>"},{"location":"navigation-material/#migration","title":"Migration","text":"<p>The official <code>androidx.compose.material.navigation</code> version 1.7.0-alpha04+ offers all of the same functionality as Accompanist Navigation Material.</p> <p>All class names are the same, the only needed changes are import related.</p> <ol> <li>Replace dependency <code>com.google.accompanist:accompanist-navigation-material:&lt;version&gt;</code> with <code>androidx.compose.material:material-navigation:&lt;version&gt;</code></li> <li>Change import for ModalBottomSheetLayout from <code>com.google.accompanist.navigation.material.ModalBottomSheetLayout</code> to <code>androidx.compose.material.navigation.ModalBottomSheetLayout</code></li> <li>Change import for bottomSheet from <code>com.google.accompanist.navigation.material.bottomSheet</code> to <code>androidx.compose.material.navigation.bottomSheet</code></li> <li>Change import for rememberBottomSheetNavigator from <code>com.google.accompanist.navigation.material.rememberBottomSheetNavigator</code> to <code>androidx.compose.material.navigation.rememberBottomSheetNavigator</code></li> <li>Change import for BottomSheetNavigator from <code>com.google.accompanist.navigation.material.BottomSheetNavigator</code> to <code>androidx.compose.material.navigation.BottomSheetNavigator</code></li> <li>Change import for BottomSheetNavigatorSheetState from <code>com.google.accompanist.navigation.material.BottomSheetNavigatorSheetState</code> to <code>androidx.compose.material.navigation.BottomSheetNavigatorSheetState</code></li> </ol>"},{"location":"navigation-material/#deprecated-guidance-for-accompanist-navigation-material","title":"Deprecated Guidance for Accompanist Navigation Material","text":"<p>The following is the deprecated guide for using Navigation Material in Accompanist. Please see above migration section for how to use the <code>androidx.compose.material.navigation</code> Material Navigation.</p>"},{"location":"navigation-material/#usage","title":"Usage","text":""},{"location":"navigation-material/#bottom-sheet-destinations","title":"Bottom Sheet Destinations","text":"<ol> <li> <p>Create a <code>BottomSheetNavigator</code> and add it to the <code>NavController</code>:</p> <pre><code>@Composable\nfun MyApp() {\n    val bottomSheetNavigator = rememberBottomSheetNavigator()\n    val navController = rememberNavController(bottomSheetNavigator)\n}\n</code></pre> </li> <li> <p>Wrap your <code>NavHost</code> in the <code>ModalBottomSheetLayout</code> composable that accepts a <code>BottomSheetNavigator</code>.</p> <pre><code>@Composable\nfun MyApp() {\n    val bottomSheetNavigator = rememberBottomSheetNavigator()\n    val navController = rememberNavController(bottomSheetNavigator)\n    ModalBottomSheetLayout(bottomSheetNavigator) {\n        NavHost(navController, \"home\") {\n           // We'll define our graph here in a bit!\n        }\n    }\n}\n</code></pre> </li> <li> <p>Register a bottom sheet destination</p> <pre><code>@Composable\nfun MyApp() {\n    val bottomSheetNavigator = rememberBottomSheetNavigator()\n    val navController = rememberNavController(bottomSheetNavigator)\n    ModalBottomSheetLayout(bottomSheetNavigator) {\n        NavHost(navController, \"home\") {\n           composable(route = \"home\") {\n               ...\n           }\n           bottomSheet(route = \"sheet\") {\n               Text(\"This is a cool bottom sheet!\")\n           }\n        }\n    }\n}\n</code></pre> </li> </ol> <p>For more examples, refer to the samples.</p>"},{"location":"navigation-material/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-navigation-material:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"permissions/","title":"Jetpack Compose Permissions","text":"<p>A library which provides Android runtime permissions support for Jetpack Compose.</p> <p>Warning</p> <p>The permission APIs are currently experimental and they could change at any time. All of the APIs are marked with the <code>@ExperimentalPermissionsApi</code> annotation.</p>"},{"location":"permissions/#usage","title":"Usage","text":""},{"location":"permissions/#rememberpermissionstate-and-remembermultiplepermissionsstate-apis","title":"<code>rememberPermissionState</code> and <code>rememberMultiplePermissionsState</code> APIs","text":"<p>The <code>rememberPermissionState(permission: String)</code> API allows you to request a certain permission to the user and check for the status of the permission. <code>rememberMultiplePermissionsState(permissions: List&lt;String&gt;)</code> offers the same but for multiple permissions at the same time.</p> <p>Both APIs expose properties for you to follow the workflow as described in the permissions documentation.</p> <p>Caution</p> <p>The call to the method that requests the permission to the user (e.g. <code>PermissionState.launchPermissionRequest()</code>) needs to be invoked from a non-composable scope. For example, from a side-effect or from a non-composable callback such as a <code>Button</code>'s <code>onClick</code> lambda.</p> <p>The following code exercises the permission request workflow.</p> <pre><code>@OptIn(ExperimentalPermissionsApi::class)\n@Composable\nprivate fun FeatureThatRequiresCameraPermission() {\n\n    // Camera permission state\n    val cameraPermissionState = rememberPermissionState(\n        android.Manifest.permission.CAMERA\n    )\n\n    if (cameraPermissionState.status.isGranted) {\n        Text(\"Camera permission Granted\")\n    } else {\n        Column {\n            val textToShow = if (cameraPermissionState.status.shouldShowRationale) {\n                // If the user has denied the permission but the rationale can be shown,\n                // then gently explain why the app requires this permission\n                \"The camera is important for this app. Please grant the permission.\"\n            } else {\n                // If it's the first time the user lands on this feature, or the user\n                // doesn't want to be asked again for this permission, explain that the\n                // permission is required\n                \"Camera permission required for this feature to be available. \" +\n                    \"Please grant the permission\"\n            }\n            Text(textToShow)\n            Button(onClick = { cameraPermissionState.launchPermissionRequest() }) {\n                Text(\"Request permission\")\n            }\n        }\n    }\n}\n</code></pre> <p>For more examples, refer to the samples.</p>"},{"location":"permissions/#limitations","title":"Limitations","text":"<p>This permissions wrapper is built on top of the available Android platform APIs. We cannot extend the platform's capabilities. For example, it's not possible to differentiate between the it's the first time requesting the permission vs the user doesn't want to be asked again use cases.</p>"},{"location":"permissions/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-permissions:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"systemuicontroller/","title":"System UI Controller for Jetpack Compose","text":"<p>Warning</p> <p>This library is deprecated, and the API is no longer maintained. We recommend forking the implementation and customising it to your needs. The original documentation is below.</p>"},{"location":"systemuicontroller/#migration","title":"Migration","text":"<p>Recommendation: If you were using SystemUIController to go edge-to-edge in your activity and change the system bar colors and system bar icon colors, use the new Activity.enableEdgeToEdge method available in androidx.activity 1.8.0-alpha03 and later. This method backports the scrims used on some versions of Android. This is a sample PR of the migration to the new method and removing the dependency on SystemUIController in Now in Android.</p> <p>For other usages, migrate to using WindowInsetsControllerCompat or window APIs directly.</p>"},{"location":"systemuicontroller/#original-documentation","title":"Original Documentation","text":"<p>System UI Controller provides easy-to-use utilities for updating the System UI bar colors within Jetpack Compose.</p>"},{"location":"systemuicontroller/#usage","title":"Usage","text":"<p>To control the system UI in your composables, you need to get a <code>SystemUiController</code> instance. The library provides the <code>rememberSystemUiController()</code> function which returns an instance for the current system (currently only Android).</p> <p>In your layouts you can update the system bar colors like so:</p> <pre><code>// Remember a SystemUiController\nval systemUiController = rememberSystemUiController()\nval useDarkIcons = !isSystemInDarkTheme()\n\nDisposableEffect(systemUiController, useDarkIcons) {\n    // Update all of the system bar colors to be transparent, and use\n    // dark icons if we're in light theme\n    systemUiController.setSystemBarsColor(\n        color = Color.Transparent,\n        darkIcons = useDarkIcons\n    )\n\n    // setStatusBarColor() and setNavigationBarColor() also exist\n\n    onDispose {}\n}\n</code></pre>"},{"location":"systemuicontroller/#system-bar-icon-colors","title":"System bar icon colors","text":"<p>The library automatically handles API level differences when running on Android devices. If we look at the example of status bar icons, Android only natively supports dark icons on API 23+. This library handles this by automatically altering the requested color with a scrim, to maintain contrast:</p> <p></p> <p>Similar happens on navigation bar color, which is only available on API 26+.</p>"},{"location":"systemuicontroller/#modifying-scrim-logic","title":"Modifying scrim logic","text":"<p>The scrim logic can be modified if needed:</p> <pre><code>systemUiController.setStatusBarColor(\n    color = Color.Transparent,\n    darkIcons = true\n) { requestedColor -&gt;\n    // TODO: return a darkened color to be used when the system doesn't\n    // natively support dark icons\n}\n</code></pre>"},{"location":"systemuicontroller/#samples","title":"Samples","text":"<p>For complete samples, check out the Insets samples which all use <code>SystemUiController</code> to set transparent system bars.</p>"},{"location":"systemuicontroller/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-systemuicontroller:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"thesis/","title":"The USDS Thesis","text":""},{"location":"thesis/#vision","title":"\ud83e\udded Vision","text":"<p>USDS is built to serve as the base monetary layer for a new autonomous economy. Unlike traditional stablecoins, USDS is not backed by fiat or crypto collateral\u2014it is governed purely by algorithms, code, and economic incentives.</p> <p>We believe that money should be:</p> <ul> <li>Neutral \u2013 Free from centralized control or censorship.</li> <li>Verifiable \u2013 Transparent and enforced by deterministic code.</li> <li>Composable \u2013 Ready to integrate across decentralized systems and agents.</li> </ul>"},{"location":"thesis/#why-a-new-stable-asset","title":"\ud83d\udca1 Why a New Stable Asset?","text":"<p>Today\u2019s stablecoins rely heavily on:</p> <ul> <li>Custodians holding fiat reserves.</li> <li>Collateral that can lose value or be mismanaged.</li> <li>Governance decisions by centralized entities.</li> </ul> <p>These approaches introduce friction, opacity, and risk.</p> <p>USDS takes a different path: a purely algorithmic and trustless design where stability arises from the protocol\u2019s feedback loops and logic\u2014not outside intervention.</p>"},{"location":"thesis/#the-core-hypothesis","title":"\ud83e\uddea The Core Hypothesis","text":"<p>A non-collateralized elastic currency can remain stable when:</p> <ul> <li>Supply expands during demand surges.</li> <li>Supply contracts during drops in usage.</li> <li>Users, markets, and automated agents coordinate around an on-chain equilibrium point.</li> </ul> <p>This creates an environment where USDS acts as a predictable unit of account and medium of exchange across decentralized ecosystems.</p>"},{"location":"thesis/#autonomous-coordination-layer","title":"\ud83d\udd04 Autonomous Coordination Layer","text":"<p>USDS is more than a stablecoin. It is a programmable substrate for economic coordination\u2014designed to be embedded in:</p> <ul> <li>Decentralized exchanges (DEXs)</li> <li>Lending protocols</li> <li>DAOs</li> <li>Autonomous agents and bots</li> </ul> <p>By providing a stable and predictable asset, USDS becomes the foundation layer for complex decentralized behaviors.</p>"},{"location":"thesis/#conclusion","title":"\ud83d\udccc Conclusion","text":"<p>USDS represents the evolution of digital money:</p> <ul> <li>No custodians</li> <li>No collateral</li> <li>No human discretion</li> </ul> <p>Just code, markets, and consensus.</p> <p>This thesis guides every technical and economic decision behind the protocol.</p> <p>\u201cIf Bitcoin is sound money, USDS is adaptive money\u2014stable by design, autonomous by nature.\u201d</p>"},{"location":"updating/","title":"Updating &amp; releasing Accompanist","text":"<p>This doc is mostly for maintainers.</p>"},{"location":"updating/#new-features-bugfixes","title":"New features &amp; bugfixes","text":"<p>All new features should be uploaded as PRs against the <code>main</code> branch. </p> <p>Once merged into <code>main</code>, they will be automatically merged into the <code>snapshot</code> branch.</p>"},{"location":"updating/#jetpack-compose-snapshots","title":"Jetpack Compose Snapshots","text":"<p>We publish snapshot versions of Accompanist, which depend on a <code>SNAPSHOT</code> versions of Jetpack Compose. These are built from the <code>snapshot</code> branch.</p>"},{"location":"updating/#updating-to-a-newer-compose-snapshot","title":"Updating to a newer Compose snapshot","text":"<p>As mentioned above, updating to a new Compose snapshot is done by submitting a new PR against the <code>snapshot</code> branch:</p> <pre><code>git checkout snapshot &amp;&amp; git pull\n# Create branch for PR\ngit checkout -b update_snapshot\n</code></pre> <p>Now edit the project to depend on the new Compose SNAPSHOT version:</p> <p>Edit <code>/gradle/libs.versions.toml</code>:</p> <p>Under <code>[versions]</code>:</p> <ol> <li>Update the <code>composesnapshot</code> property to be the snapshot number</li> <li>Ensure that the <code>compose</code> property is correct</li> </ol> <p>Make sure the project builds and test pass: <pre><code>./gradlew check\n</code></pre></p> <p>Now <code>git commit</code> the changes and push to GitHub.</p> <p>Finally create a PR (with the base branch as <code>snapshot</code>) and send for review.</p>"},{"location":"updating/#releasing","title":"Releasing","text":"<p>Once the next Jetpack Compose version is out, we're ready to push a new release:</p>"},{"location":"updating/#1-merge-snapshot-into-main","title":"#1: Merge <code>snapshot</code> into <code>main</code>","text":"<p>First we merge the <code>snapshot</code> branch into <code>main</code>:</p> <pre><code>git checkout snapshot &amp;&amp; git pull\ngit checkout main &amp;&amp; git pull\n\n# Create branch for PR\ngit checkout -b main_snapshot_merge\n\n# Merge in the snapshot branch\ngit merge snapshot\n</code></pre>"},{"location":"updating/#2-update-dependencies","title":"#2: Update dependencies","text":"<p>Edit <code>/gradle/libs.versions.toml</code>:</p> <p>Under <code>[versions]</code>:</p> <ol> <li>Update the <code>composesnapshot</code> property to a single character (usually <code>-</code>). This disables the snapshot repository.</li> <li>Update the <code>compose</code> property to match the new release (i.e. <code>1.0.0-beta06</code>)</li> </ol> <p>Make sure the project builds and test pass: <pre><code>./gradlew check\n</code></pre></p> <p>Commit the changes.</p>"},{"location":"updating/#3-bump-the-version-number","title":"#3: Bump the version number","text":"<p>Edit gradle.properties:</p> <ul> <li>Update the <code>VERSION_NAME</code> property and remove the <code>-SNAPSHOT</code> suffix.</li> </ul> <p>Commit the changes, using the commit message containing the new version name.</p>"},{"location":"updating/#4-push-to-github","title":"#4: Push to GitHub","text":"<p>Push the branch to GitHub and create a PR against the <code>main</code> branch, and send for review. Once approved and merged, it will be automatically deployed to Maven Central.</p>"},{"location":"updating/#5-create-release","title":"#5: Create release","text":"<p>Once the above PR has been approved and merged, we need to create the GitHub release:</p> <ul> <li>Open up the Releases page.</li> <li>At the top you should see a 'Draft' release, auto populated with any PRs since the last release. Click 'Edit'.</li> <li>Make sure that the version number matches what we released (the tool guesses but is not always correct).</li> <li>Double check everything, then press 'Publish release'.</li> </ul> <p>At this point the release is published. This will trigger the docs action to run, which will auto-deploy a new version of the website.</p>"},{"location":"updating/#6-prepare-the-next-development-version","title":"#6: Prepare the next development version","text":"<p>The current release is now finished, but we need to update the version for the next development version:</p> <p>Edit gradle.properties:</p> <ul> <li>Update the <code>VERSION_NAME</code> property, by increasing the version number, and adding the <code>-SNAPSHOT</code> suffix.</li> <li>Example: released version: <code>0.3.0</code>. Update to <code>0.3.1-SNAPSHOT</code></li> </ul> <p><code>git commit</code> and push to <code>main</code>.</p> <p>Finally, merge all of these changes back to <code>snapshot</code>:</p> <pre><code>git checkout snapshot &amp;&amp; git pull\ngit merge main\ngit push\n</code></pre>"},{"location":"using-snapshot-version/","title":"Using a Snapshot Version of the Library","text":"<p>If you would like to depend on the cutting edge version of the Accompanist library, you can use the snapshot versions that are published to Sonatype OSSRH's snapshot repository. These are updated on every commit to <code>main</code>.</p> <p>To do so:</p> <pre><code>repositories {\n    // ...\n    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }\n}\n\ndependencies {\n    // Check the latest SNAPSHOT version from the link above\n    classpath 'com.google.accompanist:accompanist-coil:XXX-SNAPSHOT'\n}\n</code></pre> <p>You might see a number of different versioned snapshots. If we use an example:</p> <ul> <li><code>0.3.0-SNAPSHOT</code> is a build from the <code>main</code> branch, and depends on the latest tagged Jetpack Compose release (i.e. alpha03).</li> <li><code>0.3.0.compose-6574163-SNAPSHOT</code> is a build from the <code>snapshot</code> branch. This depends on the SNAPSHOT build of Jetpack Compose from build <code>6574163</code>. You should only use these if you are using Jetpack Compose snapshot versions (see below).</li> </ul>"},{"location":"using-snapshot-version/#using-jetpack-compose-snapshots","title":"Using Jetpack Compose Snapshots","text":"<p>If you're using <code>SNAPSHOT</code> versions of the <code>androidx.compose</code> libraries, you might run into issues with the current stable Accompanist release forcing an older version of those libraries.</p> <p>We publish snapshot versions of Accompanist which depend on recent Jetpack Compose SNAPSHOT repositories. To find a recent build, look through the snapshot repository for any versions in the scheme <code>x.x.x.compose-YYYY-SNAPSHOT</code> (for example: <code>0.3.0.compose-6574163-SNAPSHOT</code>). The <code>YYYY</code> in the scheme is the snapshot build being used from AndroidX (from the example: build <code>6574163</code>). You can then use it like so:</p> <pre><code>repositories {\n    // ...\n    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }\n}\n\ndependencies {\n    // Check the latest SNAPSHOT version from the link above\n    classpath 'com.google.accompanist:accompanist-coil:XXXX.compose-YYYYY-SNAPSHOT'\n}\n</code></pre> <p>These builds are updated regularly, but there's no guarantee that we will create one for a given snapshot number.</p> <p>Note: you might also see versions in the scheme <code>x.x.x.ui-YYYY-SNAPSHOT</code>. These are the same, just using an older suffix.</p>"},{"location":"web/","title":"WebView wrapper for Jetpack Compose","text":"<p>A library which provides a Jetpack Compose wrapper around Android's WebView.</p> <p>Warning</p> <p>This library is deprecated, and the API is no longer maintained. We recommend forking the implementation and customising it to your needs. The original documentation is below.</p>"},{"location":"web/#usage","title":"Usage","text":"<p>To implement this wrapper there are two key APIs which are needed: <code>WebView</code>, which is provides the layout, and <code>rememberWebViewState(url)</code> which provides some remembered state including the URL to display.</p> <p>The basic usage is as follows:</p> <pre><code>val state = rememberWebViewState(\"https://example.com\")\n\nWebView(\n    state\n)\n</code></pre> <p>This will display a WebView in your Compose layout that shows the URL provided.</p> <p>There is a larger sample in the sample app which can be found here. This sample also shows how to show a loading state.</p>"},{"location":"web/#webview-settings-including-javascript","title":"WebView settings including JavaScript","text":"<p>By default, JavaScript is disabled in the WebView. To enable it or any other settings you can use the <code>onCreated</code> callback.</p> <pre><code>WebView(\n    state = webViewState,\n    onCreated = { it.settings.javaScriptEnabled = true }\n)\n</code></pre>"},{"location":"web/#capturing-back-presses","title":"Capturing back presses","text":"<p>By default the WebView will capture back presses/swipes when relevant and navigate the WebView back. This can be disabled via the parameter on  the Composable.</p> <pre><code>WebView(\n    ...\n    captureBackPresses = false\n)\n</code></pre>"},{"location":"web/#using-a-subclass-of-webview","title":"Using a subclass of WebView","text":"<p>If you want to use a subclass of <code>WebView</code>, or simply require more control over its instantiation, you can provide a factory.</p> <pre><code>WebView(\n    ...\n    factory = { context -&gt; CustomWebView(context) }\n)\n</code></pre>"},{"location":"web/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-webview:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"blog/","title":"Blog Overview","text":"<p>Welcome to the USDS Blog.</p> <p>This section features in-depth articles that provide insight into the foundational thinking, design rationale, and economic mechanisms behind USDS.</p> <p>Whether you're a developer, researcher, or just curious about decentralized money, our goal is to deliver content that demystifies our approach.</p> <p>Explore the topics below:</p> <ul> <li>Design Principles: How we built USDS with neutrality, transparency, and resilience in mind.</li> <li>Tokenomics: A breakdown of USDS\u2019s supply mechanics, incentives, and monetary theory.</li> </ul> <p>Stay tuned for updates, case studies, and research insights.</p>"},{"location":"blog/design/","title":"Design Principles","text":"<p>USDS is engineered on the belief that decentralized money should be:</p>"},{"location":"blog/design/#1-neutral-by-default","title":"1. Neutral by Default","text":"<p>No central controller. No human discretion. USDS operates on fixed rules that apply equally to everyone.</p>"},{"location":"blog/design/#2-programmatically-enforced","title":"2. Programmatically Enforced","text":"<p>All monetary policy and coordination mechanisms are expressed in smart contracts\u2014transparent, auditable, and immutable.</p>"},{"location":"blog/design/#3-scalable-and-efficient","title":"3. Scalable and Efficient","text":"<p>Built on Solana to take advantage of high throughput, parallel execution, and millisecond-level state updates.</p>"},{"location":"blog/design/#4-transparent-open-source","title":"4. Transparent &amp; Open Source","text":"<p>The USDS protocol is open to all. The source code and economic logic are available for review, audit, and contribution.</p> <p>These principles guide every technical and economic decision we make in the development of USDS.</p>"},{"location":"blog/tokenomics/","title":"USDS Tokenomics","text":"<p>USDS uses a non-collateralized, elastic supply model designed to maintain price stability and protocol utility.</p>"},{"location":"blog/tokenomics/#elastic-supply","title":"\ud83d\udd04 Elastic Supply","text":"<p>USDS adjusts its circulating supply in response to demand:</p> <ul> <li>Expansion: When demand rises, more USDS is minted algorithmically.</li> <li>Contraction: When demand falls, supply contracts through protocol-driven mechanisms.</li> </ul> <p>This keeps the value anchored around a target peg (typically $1).</p>"},{"location":"blog/tokenomics/#demand-feedback-loops","title":"\ud83d\udcca Demand Feedback Loops","text":"<p>Supply changes are triggered based on:</p> <ul> <li>Market signals</li> <li>Protocol health metrics</li> <li>Time-based rebalancing cycles</li> </ul>"},{"location":"blog/tokenomics/#incentives","title":"\ud83c\udfaf Incentives","text":"<p>Users and agents interact with the protocol via:</p> <ul> <li>Minting &amp; Redemption incentives</li> <li>Fee distributions</li> <li>Governance participation</li> </ul> <p>The model promotes long-term alignment between users, developers, and protocol health.</p> <p>USDS doesn\u2019t just mimic fiat stability\u2014it reimagines it through automation, decentralization, and intelligent incentives.</p>"},{"location":"protocol/architecture/","title":"USDS IdentityDepository Architecture","text":"<p>The USDS IdentityDepository is a Solana smart contract that facilitates algorithmic minting and redeeming of USDS tokens against supported collateral assets (USDC and USDT). Its architecture prioritizes stability, atomicity, and safe execution, relying on a trusted controller and validated vaults to manage collateral securely.</p>"},{"location":"protocol/architecture/#core-components","title":"\ud83e\uddf1 Core Components","text":""},{"location":"protocol/architecture/#1-identitydepository-program","title":"1. IdentityDepository Program","text":"<p>This smart contract handles the primary logic for:</p> <ul> <li>Minting USDS with validated collateral (USDC/USDT)</li> <li>Redeeming USDS back into collateral</li> <li>Ensuring authority constraints and atomic operations</li> </ul> <p>It uses Solana\u2019s account model and Anchor framework for structure and security.</p>"},{"location":"protocol/architecture/#mint-flow","title":"\ud83d\udd04 Mint Flow","text":"<p>Goal: Mint USDS in exchange for accepted stablecoin collateral.</p>"},{"location":"protocol/architecture/#steps","title":"\ud83d\udd27 Steps:","text":"<ol> <li> <p>Collateral validation    Only supported mints (USDC, USDT) are allowed.</p> </li> <li> <p>Fee deduction    Correct fee is calculated and subtracted from collateral before minting.</p> </li> <li> <p>Vault accounting    Collateral is transferred to a secure vault.</p> </li> <li> <p>USDS minting    New USDS tokens are issued to the user.</p> </li> </ol> <p>All logic is enforced using strict access control via a <code>controller</code> authority and runtime validation checks.</p>"},{"location":"protocol/architecture/#redeem-flow","title":"\ud83d\udd01 Redeem Flow","text":"<p>Goal: Burn USDS to retrieve collateral in a stable and secure way.</p>"},{"location":"protocol/architecture/#steps_1","title":"\ud83d\udd27 Steps:","text":"<ol> <li> <p>Burn first    User\u2019s USDS tokens are burned before any collateral is released.</p> </li> <li> <p>Collateral selection    Based on the user\u2019s input, the correct vault (USDC or USDT) is dynamically selected using an enum-based router.</p> </li> <li> <p>Transfer second    The corresponding amount of collateral is transferred to the user.</p> </li> </ol>"},{"location":"protocol/architecture/#safety-features","title":"\ud83d\udd10 Safety Features:","text":"<ul> <li>Enforces <code>burn-before-transfer</code> to prevent double claims.</li> <li>All math operations use <code>checked_*</code> functions to prevent overflows.</li> <li>Only trusted controllers or their delegates can execute redemptions.</li> </ul>"},{"location":"protocol/architecture/#design-decisions","title":"\ud83d\udd0d Design Decisions","text":"<ul> <li>Trusted Controller: Central authority (can be a DAO or multisig) is responsible for execution permissions.</li> <li>No Perpetuals: Unlike previous UXD designs, the protocol does not depend on derivatives for stability.</li> <li>Dual Vault Routing: Clean separation of USDC and USDT vaults prevents collateral mismatches.</li> </ul>"},{"location":"protocol/architecture/#technical-files-from-audit","title":"\u2699\ufe0f Technical Files (from audit)","text":"<ul> <li><code>mint_with_identity_depository.rs</code></li> <li><code>redeem_from_identity_depository.rs</code></li> <li><code>identity_depository.rs</code> (state definitions)</li> <li><code>controller.rs</code> (authority logic)</li> <li><code>lib.rs</code> and <code>mint.rs</code> (instruction dispatch)</li> <li>Utility modules for:</li> <li>Account validation</li> <li>PDA derivation</li> <li>Fee computation</li> </ul>"},{"location":"protocol/architecture/#summary","title":"\u2705 Summary","text":"<p>The IdentityDepository follows a minimalist, security-focused architecture:</p> <ul> <li>Simplicity improves auditability.</li> <li>All flows are linear, atomic, and access-controlled.</li> <li>Stablecoin management is deterministic, transparent, and vault-safe.</li> </ul> <p>This design provides a strong foundation for trustless stablecoin issuance within the USDS protocol.</p>"},{"location":"protocol/stability/","title":"Stability Mechanism","text":"<p>USDS maintains its stability algorithmically without using fiat or crypto collateral.</p>"},{"location":"protocol/stability/#core-mechanism-elastic-supply","title":"\ud83e\udde0 Core Mechanism: Elastic Supply","text":"<p>USDS uses a rebase mechanism that automatically: - Increases supply when price is above peg - Decreases supply when price is below peg</p>"},{"location":"protocol/stability/#price-oracles","title":"\ud83d\udef0\ufe0f Price Oracles","text":"<ul> <li>Pull real-time price data from decentralized oracles</li> <li>Use time-weighted averages to prevent manipulation</li> </ul>"},{"location":"protocol/stability/#contraction-example","title":"\ud83d\udcc9 Contraction Example","text":"<p>If USDS &gt; $1: - Protocol mints USDS to incentivize arbitrage - Supply expands until peg is restored</p> <p>If USDS &lt; $1: - Protocol contracts supply via bonding, burns, or delayed minting - Demand-supply balance is restored without collateral backing</p>"},{"location":"protocol/stability/#design-philosophy","title":"\ud83d\udca1 Design Philosophy","text":"<p>Stability arises from protocol logic + market behavior, not from reserves or custodians.</p>"},{"location":"technical/contracts/","title":"Smart Contracts Overview","text":"<p>The USDS protocol implements a secure and minimal set of smart contracts to manage the minting and redeeming of USDS against stable collateral assets like USDC and USDT. These contracts are deployed on the Solana blockchain and built using the Anchor framework.</p>"},{"location":"technical/contracts/#key-contracts","title":"\ud83e\udde9 Key Contracts","text":""},{"location":"technical/contracts/#1-identity_depositoryrs","title":"1. <code>identity_depository.rs</code>","text":"<p>Defines the core on-chain structure that manages:</p> <ul> <li>Accepted collateral types</li> <li>Minting and redemption vault logic</li> <li>Controller authority verification</li> <li>Configuration for fees, supply limits, and state</li> </ul>"},{"location":"technical/contracts/#2-mint_with_identity_depositoryrs","title":"2. <code>mint_with_identity_depository.rs</code>","text":"<p>Handles the minting flow:</p> <ul> <li>Validates supported collateral types</li> <li>Verifies signer authority</li> <li>Calculates and deducts fees</li> <li>Transfers collateral to vault</li> <li>Mints USDS tokens to the user</li> </ul>"},{"location":"technical/contracts/#3-redeem_from_identity_depositoryrs","title":"3. <code>redeem_from_identity_depository.rs</code>","text":"<p>Handles the redeem flow:</p> <ul> <li>Burns the correct amount of USDS</li> <li>Validates selected collateral type</li> <li>Transfers stablecoins from vault to user</li> <li>Protects against reentrancy and access misuse</li> </ul>"},{"location":"technical/contracts/#4-controllerrs","title":"4. <code>controller.rs</code>","text":"<p>Implements authority logic:</p> <ul> <li>Governs who can execute privileged instructions (e.g., mint, redeem)</li> <li>Can be a multisig, DAO, or centralized authority</li> <li>Used to enforce execution constraints via signer validation</li> </ul>"},{"location":"technical/contracts/#additional-components","title":"\ud83d\udee0 Additional Components","text":"<ul> <li>Utility modules:</li> <li>PDA derivation</li> <li>SPL token interface management</li> <li> <p>Fee calculations</p> </li> <li> <p>Vault logic:</p> </li> <li>Handles separate vault accounts for USDC and USDT</li> <li>Routes requests based on user-selected collateral type</li> </ul>"},{"location":"technical/contracts/#testing-and-deployment","title":"\ud83e\uddea Testing and Deployment","text":"<ul> <li>Written in Rust using the Anchor framework</li> <li>Unit and integration tests provided in the <code>/tests/</code> folder</li> <li>Deployable to Solana mainnet/testnet using Anchor CLI</li> </ul> <p>View the full source: GitHub repository (placeholder)</p>"},{"location":"technical/security/","title":"Security Model","text":"<p>USDS was designed with a security-first mindset, drawing from industry best practices in Solana smart contract development.</p>"},{"location":"technical/security/#key-security-mechanisms","title":"\ud83d\udd10 Key Security Mechanisms","text":""},{"location":"technical/security/#1-authority-enforcement","title":"1. Authority Enforcement","text":"<ul> <li>All mint and redeem instructions are restricted to trusted signers</li> <li>Controller keys are enforced at runtime and validated using PDAs</li> <li>Prevents unauthorized access to vaults or token supply</li> </ul>"},{"location":"technical/security/#2-atomic-transaction-structure","title":"2. Atomic Transaction Structure","text":"<ul> <li>Mint flow: validates inputs \u2192 transfers collateral \u2192 mints USDS</li> <li>Redeem flow: burns USDS \u2192 transfers collateral</li> <li>Order ensures no race conditions or reentrancy vulnerabilities</li> </ul>"},{"location":"technical/security/#3-safe-arithmetic","title":"3. Safe Arithmetic","text":"<ul> <li>Uses Rust\u2019s <code>checked_*</code> math functions throughout</li> <li>Prevents overflow/underflow during:</li> <li>Fee calculations</li> <li>Token transfers</li> <li>Vault balances</li> </ul>"},{"location":"technical/security/#4-collateral-routing-protection","title":"4. Collateral Routing Protection","text":"<ul> <li>Enum-based selection of USDC/USDT vaults</li> <li>Prevents mixing up or cross-leaking between collateral types</li> <li>Verifies vault account ownership and derivation on-chain</li> </ul>"},{"location":"technical/security/#5-pre-execution-validation","title":"5. Pre-Execution Validation","text":"<ul> <li>Confirms all inputs are correct and state is initialized</li> <li>Checks balances, token mints, rent exemption, and signer seeds</li> <li>Stops transactions early on invalid conditions</li> </ul>"},{"location":"technical/security/#audit-summary","title":"\ud83e\uddea Audit Summary","text":"<ul> <li>Auditor: Genesis IT Lab</li> <li>Version Audited: v1.0.0</li> <li>Date: June 2025</li> <li>Severity: No critical or high-impact vulnerabilities</li> <li>All findings: Informational only, resolved or acknowledged</li> </ul> <p>See Audit Report for detailed findings.</p>"},{"location":"technical/security/#known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>No runtime decimal validation for USDC/USDT \u2014 assumes standard (6 decimals)</li> <li>Trusted controller model \u2014 does not yet use DAO-based governance</li> </ul>"},{"location":"technical/security/#recommendations","title":"\ud83d\udee1 Recommendations","text":"<ul> <li>Add dynamic checks for token mint decimals</li> <li>Consider DAO-based governance for future iterations</li> <li>Monitor mint/redeem volume to evaluate performance under load</li> </ul> <p>USDS is secure by design, leveraging conservative assumptions, strict validation, an</p>"}]}
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Accompanist is a group of libraries that aim to supplement Jetpack Compose with features that are commonly required by developers but not yet available.</p> <p>Accompanist is a labs like environment for new Compose APIs. We use it to help fill known gaps in the Compose toolkit, experiment with new APIs and to gather insight into the development experience of developing a Compose library. The goal of these libraries is to upstream them into the official toolkit, at which point they will be deprecated and removed from Accompanist.</p> <p>For more details like, why does this library exist? Why is it not part of AndroidX? Will you be releasing more libraries? Check out our Accompanist FAQ.</p>"},{"location":"#compose-versions","title":"Compose versions","text":"<p>Each release outlines what version of the Compose UI libraries it depends on. We are currently releasing multiple versions of Accompanist for the different versions of Compose:</p> Compose 1.0 (1.0.x) Compose 1.1 (1.1.x) Compose UI 1.2 (1.2.x) Compose UI 1.3 (1.3.x) Compose UI 1.4 (1.4.x) Compose UI 1.5 (1.5.x) Compose UI 1.6 (1.6.x) Compose UI 1.7 (1.7.x) <p>For stable versions of Compose, we use the latest stable version of the Compose compiler. For non-stable versions (alpha, beta, etc), we use the latest compiler at the time of release.</p> <p>:warning: Ensure you are using the Accompanist version that matches with your Compose UI version: If you upgrade Accompanist, it will upgrade your Compose libraries version via transitive dependencies.</p>"},{"location":"#libraries","title":"Libraries","text":""},{"location":"#permissions","title":"\ud83d\udceb Permissions","text":"<p>A library that provides Android runtime permissions support for Jetpack Compose.</p>"},{"location":"#navigation-material","title":"\ud83e\udded\ud83c\udfa8\ufe0f Navigation-Material","text":"<p>A library which provides Compose Material support, such as modal bottom sheets, for Jetpack Navigation Compose.</p>"},{"location":"#drawable-painter","title":"\ud83d\udd8c\ufe0f Drawable Painter","text":"<p>A library which provides a way to use Android Drawables as Jetpack Compose Painters.</p>"},{"location":"#adaptive","title":"\ud83d\udcdc Adaptive","text":"<p>A library providing a collection of utilities for adaptive layouts.</p>"},{"location":"#swipe-to-refresh-deprecated","title":"\u2b07\ufe0f Swipe to Refresh (Deprecated)","text":"<p>See our Migration Guide for migrating to PullRefresh in Compose Material.</p>"},{"location":"#appcompat-theme-adapter-deprecated","title":"\ud83c\udfa8 AppCompat Theme Adapter (Deprecated)","text":"<p>See our Migration Guide for migrating to the new artifact in Accompanist.</p>"},{"location":"#pager-deprecated","title":"\ud83d\udcd6 Pager (Deprecated)","text":"<p>See our Migration Guide for migrating to Pager in Compose.</p>"},{"location":"#flow-layouts-deprecated","title":"\ud83c\udf0a Flow Layouts (Deprecated)","text":"<p>See our Migration Guide for migrating to FlowLayout in Compose.</p>"},{"location":"#navigation-animation-deprecated","title":"\ud83e\udded\u2728Navigation-Animation (Deprecated)","text":"<p>See our Migration Guide for migrating to using built in support for animations in Jetpack Navigation Compose. </p>"},{"location":"#placeholder-deprecated","title":"\u23f3 Placeholder (Deprecated)","text":"<p>A library that provides easy-to-use modifiers for displaying a placeholder UI while content is loading.</p>"},{"location":"#system-ui-controller-deprecated","title":"\ud83c\udf6b System UI Controller (Deprecated)","text":"<p>We recommend migrating to edge to edge. See our Migration Guide for more details.</p>"},{"location":"#appcompat-theme-adapter-deprecated_1","title":"\ud83c\udfa8 AppCompat Theme Adapter (Deprecated)","text":"<p>A library that enables the reuse of AppCompat XML themes, for theming in Jetpack Compose.</p>"},{"location":"#material-theme-adapter-deprecated","title":"\ud83c\udfa8 Material Theme Adapter (Deprecated)","text":"<p>A library that enables the reuse of MDC-Android Material 2 XML themes, for theming in Jetpack Compose.</p>"},{"location":"#material-3-theme-adapter-deprecated","title":"\ud83c\udfa8 Material 3 Theme Adapter (Deprecated)","text":"<p>A library that enables the reuse of MDC-Android Material 3 XML themes, for theming in Jetpack Compose.</p>"},{"location":"#web-deprecated","title":"\ud83c\udf0f Web (Deprecated)","text":"<p>A wrapper around WebView for basic WebView support in Jetpack Compose.</p>"},{"location":"#test-harness-deprecated","title":"\ud83d\udddc Test Harness (Deprecated)","text":"<p>Utilities for testing Compose layouts.</p>"},{"location":"#insets-deprecated-removed","title":"\ud83d\udcd0 Insets (Deprecated &amp; Removed)","text":"<p>See our Migration Guide for migrating to Insets in Compose.</p>"},{"location":"#future","title":"Future?","text":"<p>Any of the features available in this group of libraries may become obsolete in the future, at which point they will (probably) become deprecated. </p> <p>We will aim to provide a migration path (where possible), to whatever supersedes the functionality.</p>"},{"location":"#snapshots","title":"Snapshots","text":"<p>Snapshots of the current development version of Accompanist are available, which track the latest commit. See here for more information. </p>"},{"location":"#why-the-name","title":"Why the name?","text":"<p>The library is all about adding some utilities around Compose. Music composing is done by a composer, and since this library is about supporting composition, the supporting role of an accompanist felt like a good name.</p>"},{"location":"#contributions","title":"Contributions","text":"<p>Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.</p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2020 The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"adaptive/","title":"Adaptive utilities for Jetpack Compose","text":"<p>A library providing a collection of utilities for adaptive layouts.</p>"},{"location":"adaptive/#calculatedisplayfeatures","title":"calculateDisplayFeatures","text":"<p><code>calculateDisplayFeatures(activity)</code> returns the current list of <code>DisplayFeature</code>s, as reported by the Jetpack WindowManager library.</p> <p>These contain the list of folds (if any), and can be used to drive components like <code>TwoPane</code>.</p>"},{"location":"adaptive/#twopane","title":"TwoPane","text":"<p><code>TwoPane</code> is a UI component that positions exactly two slots on the screen.</p> <p>The default positioning of these two slots is driven by a <code>TwoPaneStrategy</code>, which can decide to orient the two slots side-by-side horizontally or vertically, and also configure the gap between them.</p> <p>The built-in <code>HorizontalTwoPaneStrategy</code> and <code>VerticalTwoPaneStrategy</code> allow positioning the slots based on a fixed offset, or as some fraction of the space.</p> <p><code>TwoPane</code> also requires a list of display features (to be retrieved with <code>calculateDisplayFeatures</code>), and optionally a <code>FoldAwareConfiguration</code> to determine which folds to handle automatically.</p> <p>When there is a fold that intersects with the <code>TwoPane</code> component that is obscuring or separating, the <code>TwoPane</code> will automatically place the slots to avoid the fold.</p> <p>When there is no fold, the default supplied strategy will be used instead.</p>"},{"location":"adaptive/#foldawarecolumn","title":"FoldAwareColumn","text":"<p><code>FoldAwareColumn</code> is a simplified version of Column that places children in a fold-aware manner.</p> <p><code>FoldAwareColumn</code> requires a list of display features (to be retrieved with <code>calculateDisplayFeatures</code>) to determine which folds to handle automatically.</p> <p>The built-in <code>foldPadding</code> parameter is zero, and the values of the vertical padding are used in the layout determine how much space should be left around a fold when placing children.</p> <p>When there is a horizontal fold that is obscuring or separating, the layout will begin placing children from the top of the available space. If a child is projected to overlap the fold, then its y-coordinate is increased so it will be placed fully below the fold, as will any other remaining children.</p> <p>When there is no fold, the children will be placed consecutively with no y-coordinate adjustments.</p> <p>Optionally, children can be modified with the <code>ignoreFold()</code> attribute, which means that they will be placed as if no fold is present even if they overlap a fold.</p>"},{"location":"adaptive/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-adaptive:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"appcompat-theme/","title":"AppCompat Compose Theme Adapter","text":"<p>Warning</p> <p>This library is deprecated in favor of the new <code>themeadapter-appcompat</code> artifact. The migration guide and original documentation is below.</p>"},{"location":"appcompat-theme/#migration","title":"Migration","text":"<p>Accompanist AppCompat Theme Adapter has moved from the <code>appcompat-theme</code> artifact to the <code>themeadapter-appcompat</code> artifact. The implementation is identical but the dependency and import package have changed.</p>"},{"location":"appcompat-theme/#migration-steps","title":"Migration steps","text":"<ol> <li>Change the dependency from <code>com.google.accompanist:accompanist-appcompat-theme:&lt;version&gt;</code> to <code>com.google.accompanist:accompanist-themeadapter-appcompat:&lt;version&gt;</code></li> <li>Change any <code>com.google.accompanist.appcompattheme.*</code> imports to <code>com.google.accompanist.themeadapter.appcompat.*</code></li> </ol>"},{"location":"appcompat-theme/#original-docs","title":"Original Docs","text":"<p>A library that enables reuse of AppCompat XML themes for theming in Jetpack Compose.</p> <p>The basis of theming in Jetpack Compose is the <code>MaterialTheme</code> composable, where you provide <code>Colors</code>, <code>Shapes</code> and <code>Typography</code> instances containing your styling parameters:</p> <pre><code>MaterialTheme(\n    typography = type,\n    colors = colors,\n    shapes = shapes\n) {\n    // Surface, Scaffold, etc\n}\n</code></pre> <p>AppCompat XML themes allow for similar but coarser theming via XML theme attributes, like so:</p> <pre><code>&lt;style name=\"Theme.MyApp\" parent=\"Theme.AppCompat.DayNight\"&gt;\n    &lt;item name=\"colorPrimary\"&gt;@color/purple_500&lt;/item&gt;\n    &lt;item name=\"colorAccent\"&gt;@color/green_200&lt;/item&gt;\n&lt;/style&gt;\n</code></pre> <p>This library attempts to bridge the gap between AppCompat XML themes, and themes in Jetpack Compose, allowing your composable <code>MaterialTheme</code> to be based on the <code>Activity</code>'s XML theme:</p> <pre><code>AppCompatTheme {\n    // MaterialTheme.colors, MaterialTheme.shapes, MaterialTheme.typography\n    // will now contain copies of the context's theme\n}\n</code></pre> <p>This is especially handy when you're migrating an existing app, a fragment (or other UI container) at a time.</p> <p>Caution</p> <p>If you are using Material Design Components in your app, you should use the MDC Compose Theme Adapter instead, as it allows much finer-grained reading of your theme.</p>"},{"location":"appcompat-theme/#customizing-the-theme","title":"Customizing the theme","text":"<p>The <code>AppCompatTheme()</code> function will automatically read the host context's AppCompat theme and pass them to <code>MaterialTheme</code> on your behalf, but if you want to customize the generated values, you can do so via the <code>createAppCompatTheme()</code> function:</p> <pre><code>val context = LocalContext.current\nvar (colors, type) = context.createAppCompatTheme()\n\n// Modify colors or type as required. Then pass them\n// through to MaterialTheme...\n\nMaterialTheme(\n    colors = colors,\n    typography = type\n) {\n    // rest of layout\n}\n</code></pre>"},{"location":"appcompat-theme/#generated-theme","title":"Generated theme","text":"<p>Synthesizing a material theme from a <code>Theme.AppCompat</code> theme is not perfect, since <code>Theme.AppCompat</code> does not expose the same level of customization as is available in material theming. Going through the pillars of material theming:</p>"},{"location":"appcompat-theme/#colors","title":"Colors","text":"<p>AppCompat has a limited set of top-level color attributes, which means that <code>AppCompatTheme()</code> has to generate/select alternative colors in certain situations. The mapping is currently:</p> MaterialTheme color AppCompat attribute primary <code>colorPrimary</code> primaryVariant <code>colorPrimaryDark</code> onPrimary Calculated black/white secondary <code>colorAccent</code> secondaryVariant <code>colorAccent</code> onSecondary Calculated black/white surface Default onSurface <code>android:textColorPrimary</code>, else calculated black/white background <code>android:colorBackground</code> onBackground <code>android:textColorPrimary</code>, else calculated black/white error <code>colorError</code> onError Calculated black/white <p>Where the table says \"calculated black/white\", this means either black/white, depending on which provides the greatest contrast against the corresponding background color.</p>"},{"location":"appcompat-theme/#typography","title":"Typography","text":"<p>AppCompat does not provide any semantic text appearances (such as headline6, body1, etc), and instead relies on text appearances for specific widgets or use cases. As such, the only thing we read from an AppCompat theme is the default <code>app:fontFamily</code> or <code>android:fontFamily</code>. For example:</p> <pre><code>&lt;style name=\"Theme.MyApp\" parent=\"Theme.AppCompat\"&gt;\n    &lt;item name=\"fontFamily\"&gt;@font/my_font&lt;/item&gt;\n&lt;/style&gt;\n</code></pre> <p>Compose does not currently support downloadable fonts, so any font referenced from the theme should from your resources. See here for more information.</p>"},{"location":"appcompat-theme/#shape","title":"Shape","text":"<p>AppCompat has no concept of shape theming, therefore we use the default value from <code>MaterialTheme.shapes</code>. If you wish to provide custom values, use the <code>shapes</code> parameter on <code>AppCompatTheme</code>.</p>"},{"location":"appcompat-theme/#limitations","title":"Limitations","text":"<p>There are some known limitations with the implementation at the moment:</p> <ul> <li>This relies on your <code>Activity</code>/<code>Context</code> theme extending one of the <code>Theme.AppCompat</code> themes.</li> <li>Variable fonts are not supported in Compose yet, meaning that the value of <code>android:fontVariationSettings</code> are currently ignored.</li> <li>You can modify the resulting <code>MaterialTheme</code> in Compose as required, but this only works in Compose. Any changes you make will not be reflected in the Activity theme.</li> </ul>"},{"location":"appcompat-theme/#usage","title":"Usage","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-appcompat-theme:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"appcompat-theme/#library-snapshots","title":"Library Snapshots","text":"<p>Snapshots of the current development version of this library are available, which track the latest commit. See here for more information on how to use them.</p>"},{"location":"appcompat-theme/#contributions","title":"Contributions","text":"<p>Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.</p>"},{"location":"appcompat-theme/#license","title":"License","text":"<pre><code>Copyright 2020 The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"contributing/","title":"How to Contribute","text":"<p>We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow.</p>"},{"location":"contributing/#new-featureslibraries","title":"New Features/Libraries","text":"<p>Before contributing large new features and/or libraries please start a discussion  with us first via GitHub Issues and check that we can support it. We are unable to support all new features, even though we wish we could! If we  are unable to support adding your feature, we always encourage you to open source it  in your own repository to help the Compose community grow.</p>"},{"location":"contributing/#contributor-license-agreement","title":"Contributor License Agreement","text":"<p>Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution, this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://cla.developers.google.com/ to see your current agreements on file or to sign a new one.</p> <p>You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again.</p>"},{"location":"contributing/#code-reviews","title":"Code Reviews","text":"<p>All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.</p>"},{"location":"contributing/#api-changes","title":"API Changes","text":"<p>If you are changing any public APIs, you need to run <code>./gradlew metalavaGenerateSignatureRelease</code> which will  update the API signatures.</p>"},{"location":"contributing/#formatting","title":"Formatting","text":"<p>To apply formatting, we use spotless. Run <code>./gradlew :pager:spotlessApply</code> to format the code according  to the spec.</p>"},{"location":"drawablepainter/","title":"Drawable Painter","text":"<p>A library which provides a way to use Android drawables as Jetpack Compose Painters.</p> <p>This library attempts to support most Drawable configuration, as well as Animatable drawables, such as AnimatedVectorDrawable.</p>"},{"location":"drawablepainter/#usage","title":"Usage","text":"<pre><code>@Composable\nfun DrawDrawable() {\n    val drawable = AppCompatResources.getDrawable(LocalContext.current, R.drawable.rectangle)\n\n    Image(\n        painter = rememberDrawablePainter(drawable = drawable),\n        contentDescription = \"content description\",\n    )\n}\n</code></pre>"},{"location":"drawablepainter/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-drawablepainter:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"flowlayout/","title":"Jetpack Compose Flow Layouts","text":"<p>Warning</p> <p>This library is deprecated, with official FlowLayout support in androidx.compose.foundation. The migration guide and original documentation is below.</p>"},{"location":"flowlayout/#migration-guide-to-the-official-flowlayouts","title":"Migration Guide to the official FlowLayouts","text":"<p>The official <code>androidx.compose.foundation</code> FlowLayouts support is very similar to accompanist/flowlayouts, with a few changes.</p> <ol> <li>Replace import packages to point to Androidx.Compose <pre><code>import androidx.compose.foundation.layout.FlowColumn\n</code></pre></li> </ol> <pre><code>import androidx.compose.foundation.layout.FlowRow\n</code></pre> <p>For <code>FlowColumn</code>:  </p> <ol> <li> <p>Replace Modifier <code>mainAxisAlignment</code> with <code>verticalArrangement</code> </p> </li> <li> <p>Replace Modifier <code>crossAxisAlignment</code> with <code>horizontalArrangement</code></p> </li> </ol> <p>For <code>FlowRow</code> </p> <ol> <li> <p><code>mainAxisAlignment</code> is now <code>horizontalArrangement</code> </p> </li> <li> <p><code>crossAxisAlignment</code> is now <code>verticalArrangement</code> </p> </li> </ol> <pre><code>FlowColumn(\n    modifier = Modifier,\n    verticalArrangement = Arrangement.Top,\n    horizontalArrangement = Arrangement.Start,\n    content = { // columns }\n) \n</code></pre> <pre><code>FlowRow(\n    modifier = Modifier,\n    horizontalArrangement = Arrangement.Start,\n    verticalArrangement = Arrangement.Top,\n    content = { // rows }\n) \n</code></pre> <ol> <li> <p>Replace <code>mainAxisSpacing</code> with <code>HorizontalArrangement.spacedBy(50.dp, Alignment.*)</code> in <code>FlowRow</code> and <code>VerticalArrangement.spacedBy(50.dp, Alignment.*)</code> in <code>FlowColumn</code>.</p> </li> <li> <p>Replace <code>crossAxisSpacing</code> with <code>VerticalArrangement.spacedBy(50.dp, Alignment.*)</code> in <code>FlowRow</code> and <code>HorizontalArrangement.spacedBy(50.dp)</code> in <code>FlowColumn</code>. </p> </li> </ol> <p>Here <code>Alignment.*</code> is the Alignment you wish to use such as <code>Alignment.Start</code>, <code>Alignment.Top</code> etc</p> <pre><code>FlowRow(\n    modifier = Modifier,\n    horizontalArrangement = Arrangement.spacedBy(50.dp, Alignment.Start),\n    verticalArrangement = Arrangement.spacedBy(50.dp, Alignment.Top),\n    content = { // rows }\n)\n</code></pre> <pre><code>FlowColumn(\n    modifier = Modifier,\n    verticalArrangement = Arrangement.spacedBy(50.dp, Alignment.Top),\n    horizontalArrangement = Arrangement.spacedBy(50.dp, Alignment.Start),\n    content = { // columns }\n)\n</code></pre> <ol> <li><code>lastLineMainAxisAlignment</code> is currently not supported in Compose Flow Layouts.</li> </ol>"},{"location":"flowlayout/#new-features","title":"New Features:","text":""},{"location":"flowlayout/#add-weights-to-each-child","title":"Add weights to each child","text":"<p>To scale an item based on the size of its parent and the space available, adding weights is helpful.  Adding a weight in <code>FlowRow</code> and <code>FlowColumn</code> is different than in <code>Row</code> and <code>Column</code>.</p> <p>In <code>FlowLayout</code>, it is based on the number of items placed on the row it falls on and their weights.  First we check to see if an item can fit in the current row or column based on its intrinsic size.  If it fits and has a weight, its final size is expanded based on the available space and the number of items  with weights placed on the row or column it falls on. </p> <p>Because of the nature of <code>FlowLayouts</code> an item only expands and does not shrink in size. Its width in <code>FlowRow</code> or height in <code>FlowColumn</code> determines it minimum width or height, and then expands based on its weight and  the available space remaining after row items' width/height have been determined.</p> <pre><code>FlowRow() { \n     repeat(20) { Box(Modifier.size(20.dp).weight(1f, true) } \n}\n</code></pre>"},{"location":"flowlayout/#create-a-maximum-number-of-items-in-row-or-column","title":"Create a maximum number of items in row or column","text":"<p>You may choose to limit the number of items that appear in each row in <code>FlowRow</code> or column in <code>FlowColumn</code> This can be configured using <code>maxItemsInEachRow</code> or <code>maxItemsInEachColumn</code>:  <pre><code>FlowRow(maxItemsInEachRow = 3) { \n     repeat(10) { Box(Modifier.size(20.dp).weight(1f, true) } \n}\n</code></pre></p>"},{"location":"flowlayout/#examples","title":"Examples","text":"<p>For examples, refer to the Flow Row samples  and the Flow Column samples.</p>"},{"location":"flowlayout/#original-docs","title":"Original Docs","text":"<p>It is most similar to <code>Row</code> and <code>Column</code> and shares similar modifiers and the scopes.  Unlike the standard <code>Row</code> and <code>Column</code> composables, if it runs out of space on the current row,  the children are placed in the next line, and this repeats until the children are fully placed.</p>"},{"location":"flowlayout/#usage","title":"Usage","text":"<pre><code>FlowRow {\n    // row contents\n}\n\nFlowColumn {\n    // column contents\n}\n</code></pre>"},{"location":"flowlayout/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-flowlayout:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"insets/","title":"Insets for Jetpack Compose","text":"<p>Warning</p> <p>This library is deprecated, with official insets support in androidx.compose.foundation. The migration guide and original documentation is below.</p>"},{"location":"insets/#migration","title":"Migration","text":"<p>The official <code>androidx.compose.foundation</code> insets support is very similar to accompanist/insets, with a few changes.</p> <p><code>androidx.compose.foundation</code> also does not disable window decor fitting, so you still need to call <code>WindowCompat.setDecorFitsSystemWindows(window, false)</code> from your Activity. You also still need to set the system bar backgrounds to be transparent, which can be done with our System UI Controller library.</p> <p>If you are using insets for IME support, you also still need to ensure that the activity's <code>windowSoftInputMode</code> is set to <code>adjustResize</code>:</p> <pre><code>&lt;activity\n      android:name=\".MyActivity\"\n      android:windowSoftInputMode=\"adjustResize\"&gt;\n&lt;/activity&gt;\n</code></pre>"},{"location":"insets/#migration-steps","title":"Migration steps:","text":"<ol> <li>Remove <code>ProvideWindowInsets</code> (there is no equivalent in <code>androidx.compose.foundation</code>)</li> <li>Remove <code>ViewWindowInsetObserver</code> (there is no equivalent in <code>androidx.compose.foundation</code>)</li> <li>Replace padding modifiers with <code>androidx.compose.foundation</code> equivalents. If using <code>additionalPadding</code> or only applying the insets to certain sides, use the corresponding <code>WindowInsets.add</code> and <code>WindowInsets.only</code> extensions.</li> <li>Replace <code>rememberInsetsPaddingValues</code> with the equivalent <code>WindowInsets.asPaddingValues</code>.</li> <li>Replace direct calculations from <code>LocalWindowInsets.current</code> with calculations on <code>WindowInsets</code>.</li> <li>Continue using the non-deprecated <code>insets-ui</code> for now.</li> </ol> <p>For reference, consult the Migration table below.</p>"},{"location":"insets/#inset-consumption","title":"Inset consumption","text":"<p>The biggest behavioral change between <code>accompanist/insets</code> and <code>androidx.compose.foundation</code> is in the consumption behavior of padding modifiers.</p> <p>In <code>accompanist/insets</code>, the padding modifiers always padded the full size of the specified inset types, which led to some unintuitive duplicate padding when nesting modifiers.</p> <p>For example, let\u2019s look at what happens when we have nested boxes, where the outer one has Modifier.systemBarsPadding() applied, and the inner has Modifier.imePadding():</p> <pre><code>Box(Modifier.systemBarsPadding()) {\n    Box(Modifier.imePadding()) {\n        // content\n    }\n}\n</code></pre> <p>Let\u2019s assume that the bottom system bar padding is <code>30dp</code>, to account for the navigation bar padding, and let\u2019s assume that when the IME is visible, the height of the IME is <code>150dp</code>.</p> <p>When the IME is closed, the outer box will apply the bottom <code>30dp</code> as padding, and the inner box will apply zero additional padding, since the IME isn\u2019t visible.</p> <p>When the IME opens, the outer box will continue to apply the bottom <code>30dp</code> as the system bar padding, and the inner box will now apply <code>150dp</code> bottom padding, since that is the full height of the IME.</p> <p>This results in a total padding of <code>180dp</code> applied to the content, which double pads the bottom navigation bar padding. The solutions to this issue were using <code>derivedWindowInsetsTypeOf</code>, built-in derived types like <code>Modifier.navigationBarsWithImePadding()</code>, or performing calculations manually to apply the remaining padding.</p> <p>In <code>androidx.compose.foundation</code>, when the IME is open, the outer box still apply the bottom <code>30dp</code>, but the inner box will only apply the remaining <code>120dp</code> needed to have the content be padded a total of <code>150dp</code> to match the height of the IME.</p> <p>This behavior can be influenced further in <code>androidx.compose.foundation</code> with <code>Modifier.consumedWindowInsets()</code></p> <p>As a result, the equivalent of <code>Modifier.navigationBarsWithImePadding()</code> is simply <code>Modifier.navigationBarsPadding().imePadding()</code>.</p>"},{"location":"insets/#migration-table","title":"Migration table:","text":"accompanist/insets androidx.compose.foundation <code>ProvideWindowInsets</code> (remove) <code>Modifier.systemBarsPadding()</code> <code>Modifier.systemBarsPadding()</code> <code>Modifier.systemBarsPadding(bottom = false)</code> <code>Modifier.windowInsetsPadding(WindowInsets.systemBars.only(WindowInsetsSides.Horizontal + WindowInsetsSides.Top))</code> <code>Modifier.statusBarsPadding()</code> <code>Modifier.statusBarsPadding()</code> <code>Modifier.navigationBarsPadding()</code> <code>Modifier.navigationBarsPadding()</code> <code>Modifier.imePadding()</code> <code>Modifier.imePadding()</code> <code>Modifier.cutoutPadding()</code> <code>Modifier.displayCutoutPadding()</code> <code>Modifier.navigationBarsWithImePadding()</code> <code>Modifier.navigationBarsPadding().imePadding()</code> <code>Modifier.statusBarsHeight()</code> <code>Modifier.windowInsetsTopHeight(WindowInsets.statusBars)</code> <code>Modifier.navigationBarsHeight()</code> <code>Modifier.windowInsetsBottomHeight(WindowInsets.navigationBars)</code> <code>Modifier.navigationBarsWidth()</code> <code>Modifier.windowInsetsStartWidth(WindowInsets.navigationBars)</code> / <code>Modifier.windowInsetsEndWidth(WindowInsets.navigationBars)</code> <code>rememberInsetsPaddingValues(insets = LocalWindowInsets.current.statusBars, applyStart = true, applyTop = true, applyEnd = true)</code> <code>WindowInsets.statusBars.only(WindowInsetsSides.Horizontal + WindowInsetsSides.Top).asPaddingValues()</code> <code>derivedWindowInsetsTypeOf</code> <code>WindowInsets.union(windowInsets: WindowInsets)</code> <code>LocalWindowInsets.current.navigationBars</code> <code>WindowInsets.navigationBars</code> <code>LocalWindowInsets.current.statusBars</code> <code>WindowInsets.statusBars</code> <code>LocalWindowInsets.current.ime</code> <code>WindowInsets.ime</code> <code>LocalWindowInsets.current.systemGestures</code> <code>WindowInsets.systemGestures</code> <code>LocalWindowInsets.current.systemBars</code> <code>WindowInsets.systemBars</code> <code>LocalWindowInsets.current.displayCutout</code> <code>WindowInsets.displayCutout</code> <code>LocalWindowInsets.current.ime.bottom</code> <code>WindowInsets.ime.getBottom(LocalDensity.current)</code> <code>WindowInsets.Type.isVisible</code> <code>WindowInsets.isImeVisible</code>, etc. <code>WindowInsets.Type.animationInProgress</code> Bug: 217770337 <code>WindowInsets.Type.animationFraction</code> Bug: 217770337 <code>WindowInsets.Type.layoutInsets</code> Bug: 217770337 <code>WindowInsets.Type.animatedInsets</code> Bug: 217770337 <code>rememberImeNestedScrollConnection()</code> <code>Modifier.imeNestedScroll()</code>"},{"location":"insets/#original-docs","title":"Original docs","text":"<p>Insets for Jetpack Compose takes a lot of the ideas which drove Insetter for views, and applies them for use in composables.</p>"},{"location":"insets/#usage","title":"Usage","text":"<p>To setup Insets in your composables, you need to call the <code>ProvideWindowInsets</code> function and wrap your content. This would typically be done near the top level of your composable hierarchy:</p> <pre><code>setContent {\n  MaterialTheme {\n    ProvideWindowInsets {\n      // your content\n    }\n  }\n}\n</code></pre> <p>Note</p> <p>This library does not disable window decor fitting. For your view hierarchy to able to receive insets, you need to make sure to call: <code>WindowCompat.setDecorFitsSystemWindows(window, false)</code> from your Activity. You also need to set the system bar backgrounds to be transparent, which can be done with our System UI Controller library.</p> <p><code>ProvideWindowInsets</code> allows the library to set an <code>OnApplyWindowInsetsListener</code> on your content's host view. That listener is used to update the value of a composition local bundled in this library: <code>LocalWindowInsets</code>.</p> <p><code>LocalWindowInsets</code> holds an instance of <code>WindowInsets</code> which contains the value of various WindowInsets types. You can use the values manually like so:</p> <pre><code>@Composable\nfun ImeAvoidingBox() {\n    val insets = LocalWindowInsets.current\n\n    val imeBottom = with(LocalDensity.current) { insets.ime.bottom.toDp() }\n    Box(Modifier.padding(bottom = imeBottom))\n}\n</code></pre> <p>...but we also provide some easy-to-use Modifiers.</p>"},{"location":"insets/#modifiers","title":"Modifiers","text":"<p>We provide two types of modifiers for easy handling of insets: padding and size.</p>"},{"location":"insets/#padding-modifiers","title":"Padding modifiers","text":"<p>The padding modifiers allow you to apply padding to a composable which matches a specific type of inset. Currently we provide:</p> <ul> <li><code>Modifier.statusBarsPadding()</code></li> <li><code>Modifier.navigationBarsPadding()</code></li> <li><code>Modifier.systemBarsPadding()</code></li> <li><code>Modifier.imePadding()</code></li> <li><code>Modifier.navigationBarsWithImePadding()</code></li> <li><code>Modifier.cutoutPadding()</code></li> </ul> <p>These are commonly used to move composables out from under the system bars. The common example would be a <code>FloatingActionButton</code>:</p> <pre><code>FloatingActionButton(\n    onClick = { /* TODO */ },\n    modifier = Modifier\n        .align(Alignment.BottomEnd)\n        .padding(16.dp) // normal 16dp of padding for FABs\n        .navigationBarsPadding() // Move it out from under the nav bar\n) {\n    Icon(imageVector = Icons.Default.Add, contentDescription = null)\n}\n</code></pre>"},{"location":"insets/#size-modifiers","title":"Size modifiers","text":"<p>The size modifiers allow you to match the size of a composable to a specific type of inset. Currently we provide:</p> <ul> <li><code>Modifier.statusBarsHeight()</code></li> <li><code>Modifier.navigationBarsHeight()</code></li> <li><code>Modifier.navigationBarsWidth()</code></li> </ul> <p>These are commonly used to allow composables behind the system bars, to provide background protection, or similar:</p> <pre><code>Spacer(\n    Modifier\n        .background(Color.Black.copy(alpha = 0.7f))\n        .statusBarsHeight() // Match the height of the status bar\n        .fillMaxWidth()\n)\n</code></pre>"},{"location":"insets/#paddingvalues","title":"PaddingValues","text":"<p>Compose also provides the concept of <code>PaddingValues</code>, a data class which contains the padding values to be applied on all dimensions (similar to a rect). This is commonly used with container composables, such as <code>LazyColumn</code>, to set the content padding.</p> <p>You may want to use inset values for content padding, so this library provides the <code>rememberInsetsPaddingValues()</code> extension function to convert between <code>Insets</code> and <code>PaddingValues</code>. Here's an example of using the system bars insets:</p> <pre><code>LazyColumn(\n    contentPadding = rememberInsetsPaddingValues(\n        insets = LocalWindowInsets.current.systemBars,\n        applyTop = true,\n        applyBottom = true,\n    )\n) {\n    // content\n}\n</code></pre> <p>For a more complex example, see the <code>EdgeToEdgeLazyColumn</code> example:</p> <p> </p>"},{"location":"insets/#inset-aware-layouts-insets-ui","title":"Inset-aware layouts (<code>insets-ui</code>)","text":"<p>Warning</p> <p>This library is deprecated, with official support in androidx.compose.material. The original documentation is below.</p> <p>Unfortunately, most of Compose Material's layouts do not support the use of content padding, which means that the following code probably doesn't produce the effect you want:</p> <pre><code>// \ud83d\ude25 This likely doesn't do what you want\nTopAppBar(\n    // content\n    modifier = Modifier.statusBarsPadding()\n)\n</code></pre> <p>To workaround this, we provide the <code>insets-ui</code> companion library which contains versions of commonly used layouts, with the addition of a <code>contentPadding</code> parameter. The example below is using our <code>TopAppBar</code> layout, providing the status bar insets to use as content padding:</p> <pre><code>import com.google.accompanist.insets.ui.TopAppBar\n\nTopAppBar(\n    contentPadding = rememberInsetsPaddingValues(\n        insets = LocalWindowInsets.current.statusBars,\n        applyStart = true,\n        applyTop = true,\n        applyEnd = true,\n    )\n) {\n    // content\n}\n</code></pre> <p>The library also provides a modified copy of Compose Material's <code>Scaffold</code> which better supports edge-to-edge layouts, by drawing the top and bottom bars over the content.</p> <pre><code>Scaffold(\n    topBar = {\n        // We use TopAppBar from accompanist-insets-ui which allows us to provide\n        // content padding matching the system bars insets.\n        TopAppBar(\n            title = { Text(stringResource(R.string.insets_title_list)) },\n            backgroundColor = MaterialTheme.colors.surface.copy(alpha = 0.9f),\n            contentPadding = rememberInsetsPaddingValues(\n                LocalWindowInsets.current.statusBars,\n                applyBottom = false,\n            ),\n        )\n    },\n    bottomBar = {\n        // We add a spacer as a bottom bar, which is the same height as\n        // the navigation bar\n        Spacer(Modifier.navigationBarsHeight().fillMaxWidth())\n    },\n) { contentPadding -&gt;\n    // We apply the contentPadding passed to us from the Scaffold\n    Box(Modifier.padding(contentPadding)) {\n        // content\n    }\n}\n</code></pre> <p>See the API docs for a list of the other layouts provided in the library.</p>"},{"location":"insets/#animated-insets-support","title":"Animated Insets support","text":"InfoUsage <p>The library now has experimental support for <code>WindowInsetsAnimations</code>, allowing your content is react to inset animations, such as the on screen-keyboard (IME) being animated on/off screen. The <code>imePadding()</code> and <code>navigationBarsWithImePadding()</code> modifiers are available especially for this use-case. </p> <p>This functionality works wherever WindowInsetsAnimationCompat works, which at the time or writing is on devices running API 21+.</p> <p>To enable animated insets support, you need need to new <code>ProvideWindowInsets</code> overload, and set <code>windowInsetsAnimationsEnabled = true</code>.</p> <pre><code>ProvideWindowInsets(windowInsetsAnimationsEnabled = true) {\n    // content\n}\n</code></pre> <p>You can then use the new <code>navigationBarsWithImePadding()</code> modifier like so:</p> <pre><code>OutlinedTextField(\n    // other params,\n    modifier = Modifier.navigationBarsWithImePadding()\n)\n</code></pre> <p>See the ImeAnimationSample for a working example.</p>"},{"location":"insets/#ime-animations","title":"IME animations","text":"<p>If you're using the animation insets support for IME/keyboard animations, you also need to ensure that the activity's <code>windowSoftInputMode</code> is set to <code>adjustResize</code>:</p> <pre><code>&lt;activity\n      android:name=\".MyActivity\"\n      android:windowSoftInputMode=\"adjustResize\"&gt;\n&lt;/activity&gt;\n</code></pre> <p>The default value of <code>windowSoftInputMode</code> should work, but Compose does not currently set the flags necessary (see here).</p>"},{"location":"insets/#experimental","title":"\ud83d\udea7 Experimental","text":"<p>The features below are experimental, and require developers to opt-in.</p>"},{"location":"insets/#controlling-the-ime-on-screen-keyboard","title":"Controlling the IME (on-screen keyboard)","text":"InfoUsage <p>This library also has support for controlling the IME from scroll gestures, allowing your scrollable components to pull/push the IME on/off screen. This is achieved through the built-in <code>NestedScrollConnection</code> implementation returned by <code>rememberImeNestedScrollConnection()</code>.</p> <p>This functionality only works when running on devices with API 30+.</p> <pre><code>// Here we're using a scrollable Column, but it also works with LazyColumn, etc.\nColumn(\n    // We use the nestedScroll modifier, passing in the \n    // the connection from rememberImeNestedScrollConnection()\n    modifier = Modifier\n        .nestedScroll(connection = rememberImeNestedScrollConnection())\n        .verticalScroll(state = rememberScrollState())\n) {\n    // list content\n}\n</code></pre> <p>See the ImeAnimationSample for a working example.</p>"},{"location":"insets/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-insets:&lt;version&gt;\"\n    // If using insets-ui\n    implementation \"com.google.accompanist:accompanist-insets-ui:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"insets/#something-not-working","title":"Something not working?","text":"<p>If you find that something isn't working correctly, here's a checklist to try:</p> <ul> <li>Check that you've called <code>WindowCompat.setDecorFitsSystemWindows(window, false)</code> in your Activity. Unless you do that, the window decor will consume the insets, and they will not be dispatched to your content.</li> <li>If it's something related to the keyboard, check that the Activity's <code>windowSoftInputMode</code> is set to <code>adjustResize</code>. Without that, IME visibility changes will not be sent as inset changes.</li> <li>Similarly, if you're setting <code>android:windowFullscreen</code> to <code>true</code> (or using a <code>.Fullscreen</code> theme), be aware that <code>adjustResize</code> will not work. Please see the documentation for an alternative.</li> <li>If you're using <code>ProvideWindowInsets</code> (or <code>ViewWindowInsetObserver</code>) in multiple layers of your view hierarchy (i.e. in the activity, and in a fragment), you need to turn off consuming of insets. By default <code>ProvideWindowInsets</code> and <code>ViewWindowInsetObserver</code> will completely consume any insets passed to it. In the previous example, this means that the activity content will get the insets, but the fragment won't. To disable consuming, pass <code>consumeWindowInsets = false</code> to <code>ProvideWindowInsets</code> or <code>ViewWindowInsetObserver.start()</code>.</li> </ul>"},{"location":"migration/","title":"Migration from dev.chrisbanes.accompanist","text":"<p>In March 2021, the Accompanist project moved from github.com/chrisbanes/accompanist to github.com/google/accompanist. At the same time we migrated the libraries over to a new package name and Maven group ID.</p> <p>As a summary:</p> <ul> <li>All code was refactored from the <code>dev.chrisbanes.accompanist</code> root package to <code>com.google.accompanist</code> package.</li> <li>The Maven group ID was changed from <code>dev.chrisbanes.accompanist</code> to <code>com.google.accompanist</code>.</li> </ul>"},{"location":"migration/#semi-automatic-migration","title":"Semi-automatic migration...","text":"<p>The following methods below are available for your information only, but may help if you need to migrate from the old package name. </p> <p>Warning</p> <p>Use these at your own risk, but they have worked on multiple projects from my testing. It's a good idea to make sure that you've made a backup or committed any changes before running these.</p>"},{"location":"migration/#android-studio-intellij","title":"Android Studio / IntelliJ","text":"<p>You can use the Replace in Path pane (\u21e7\u2318R on Mac) in Android Studio to do a project-wide search and replace.</p> <p></p> <ul> <li>Find query: <code>dev.chrisbanes.accompanist</code></li> <li>Replace string: <code>com.google.accompanist</code></li> <li>Optional: Set the file mask to <code>*.kt</code> so that only Kotlin files are searched. Repeat for <code>*.gradle</code>.</li> </ul> <p>Similar can be achieved in Visual Studio Code. Other IDEs / text editors are available.</p>"},{"location":"migration/#yolo-commands","title":"YOLO commands","text":"<p>These commands while automatically replace any imports and Gradle dependencies for the project in the current directory.</p>"},{"location":"migration/#macos","title":"MacOS","text":"<pre><code>find . -type f \\( -name '*.kt' -or -name '*.gradle*' \\) \\\n    -exec sed -i '' 's/dev\\.chrisbanes\\.accompanist/com\\.google\\.accompanist/' {} \\;\n</code></pre>"},{"location":"migration/#linux","title":"Linux","text":"<pre><code>find . -type f \\( -name '*.kt' -or -name '*.gradle*' \\) \\\n    -exec sed -i 's/dev\\.chrisbanes\\.accompanist/com\\.google\\.accompanist/' {} \\;\n</code></pre>"},{"location":"navigation-animation/","title":"Jetpack Navigation Compose Animation","text":"<p>A library which provides Compose Animation support for Jetpack Navigation Compose.</p> <p>Warning</p> <p>This library is deprecated, with official navigation-compose support in androidx.navigation.compose. The original documentation is below the migration guide.</p>"},{"location":"navigation-animation/#migration","title":"Migration","text":"<p>The official <code>androidx.navigation.compose</code> version 2.7.0-alpha01+ offers all of the same functionality as Accompanist Navigation Animation.</p> <ol> <li>Make sure you are using Compose 1.5.0-beta01+ before migrating to <code>androidx.navigation.compose</code>.</li> <li>Replace dependency <code>com.google.accompanist:accompanist-navigation-animation:&lt;version&gt;</code> with <code>androidx.navigation:navigation-compose:&lt;version&gt;</code></li> <li>Replace <code>rememberAnimatedNavController</code> with <code>rememberNavController</code> and change import to <code>androidx.navigation.compose.rememberNavController</code></li> <li>Replace <code>AnimatedNavHost</code> with <code>NavHost</code> and change import to <code>androidx.navigation.compose.NavHost</code></li> <li>Replace <code>AnimatedComposeNavigator</code> with <code>ComposeNavigator</code> and change import to <code>androidx.navigation.compose.ComposeNavigator</code></li> <li>Replace <code>AnimatedComposeNavigator()</code> constructor with <code>ComposeNavigator()</code> constructor</li> <li>Replace <code>AnimatedComposeNavigator.Destination</code> with <code>ComposeNavigator.Destination</code></li> <li>Change import for composable from <code>com.google.accompanist.navigation.animation.composable</code> to <code>androidx.navigation.compose.composable</code></li> <li>Change import for navigation from <code>com.google.accompanist.navigation.animation.navigation</code> to <code>androidx.navigation.compose.navigation</code></li> </ol>"},{"location":"navigation-animation/#migration-table","title":"Migration Table","text":"<p>The following is a mapping of Navigation classes and functions from accompanist to androidx.compose:</p> accompanist navigation-animation androidx.navigation.compose <code>AnimatedNavHost</code> <code>NavHost</code> <code>AnimatedComposeNavigator</code> <code>ComposeNavigator</code> <code>AnimatedComposeNavigator.Destination</code> <code>ComposeNavigator.Destination</code> <code>rememberAnimatedNavController()</code> <code>rememberNavController()</code> <code>NavGraphBuilder.composable()</code> <code>NavGraphBuilder.composable()</code> <code>NavGraphBuilder.navigation()</code> <code>NavGraphBuilder.navigation()</code> <p>Of note, ComposeNavigation.Destination allows use of <code>AnimatedContentScope</code> instead of just <code>AnimatedVisibilityScope</code>.</p>"},{"location":"navigation-animation/#deprecated-guidance-for-accompanist-navigation","title":"Deprecated Guidance for Accompanist Navigation","text":"<p>The following is the deprecated guide for using Navigation in Accompanist. Please see above migration section for how to use the <code>androidx.navigation.compose</code> Navigation.</p>"},{"location":"navigation-animation/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-navigation-animation:&lt;version&gt;\"\n}\n</code></pre> <p>Follow the steps below to either add Jetpack Navigation Compose to your app, or to migrate an existing Jetpack Navigation Compose implementation.</p>"},{"location":"navigation-animation/#usage","title":"Usage","text":"<p>The <code>AnimatedNavHost</code> composable offers a way to add custom transitions to composables in Navigation Compose via parameters that can be attached to either an individual <code>composable</code> destination, a <code>navigation</code> element, or to the <code>AnimatedNavHost</code> itself.</p> <p>Each lambda has an <code>AnimatedContentScope&lt;NavBackStackEntry&gt;</code> receiver scope that allows you to use special transitions (such as <code>slideIntoContainer</code> and <code>slideOutOfContainer</code>) and gives you access to the <code>initialState</code> and <code>targetState</code> properties that let you customize what transitions are run based on what screen you are transitioning from (the <code>initialState</code>) and transitioning to (the <code>targetState</code>). </p> <ul> <li><code>enterTransition</code> controls what <code>EnterTransition</code> is run when the <code>targetState</code> <code>NavBackStackEntry</code> is appearing on the screen.</li> <li><code>exitTransition</code> controls what <code>ExitTransition</code> is run when the <code>initialState</code> <code>NavBackStackEntry</code> is disappearing from the screen.</li> <li><code>popEnterTransition</code> defaults to <code>enterTransition</code>, but can be overridden to provide a separate <code>EnterTransition</code> when the <code>targetState</code> <code>NavBackStackEntry</code> is appearing on the screen due to a pop operation (i.e., <code>popBackStack()</code>).</li> <li><code>popExitTransition</code> defaults to <code>exitTransition</code>, but can be overridden to provide a separate <code>ExitTransition</code> when the <code>initialState</code> <code>NavBackStackEntry</code> is disappearing from the screen due to a pop operation (i.e., <code>popBackStack()</code>).</li> </ul> <p>For each transition, if a <code>composable</code> destination returns <code>null</code>, the parent <code>navigation</code> element's transition will be used, thus allowing you to set a global set of transitions at the navigation graph level that will apply to every <code>composable</code> in that graph. This continues up the hierarchy until you reach the root <code>AnimatedNavHost</code>, which controls the global transitions for all destinations and nested graphs that do not specify one.</p> <p>Note: this means that if a destination wants to instantly jump cut between destinations, it should return <code>EnterTransition.None</code> or <code>ExitTransition.None</code> to signify that no transition should be run, rather than return <code>null</code>.</p> <pre><code>@Composable\nprivate fun ExperimentalAnimationNav() {\n    val navController = rememberAnimatedNavController()\n    AnimatedNavHost(navController, startDestination = \"Blue\") {\n        composable(\n            \"Blue\",\n            enterTransition = {\n                when (initialState.destination.route) {\n                    \"Red\" -&gt;\n                        slideIntoContainer(AnimatedContentScope.SlideDirection.Left, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            },\n            exitTransition = {\n                when (targetState.destination.route) {\n                    \"Red\" -&gt;\n                        slideOutOfContainer(AnimatedContentScope.SlideDirection.Left, animationSpec = tween(700))\n                     else -&gt; null\n                }\n            },\n            popEnterTransition = {\n                            when (initialState.destination.route) {\n                                \"Red\" -&gt;\n                                    slideIntoContainer(AnimatedContentScope.SlideDirection.Right, animationSpec = tween(700))\n                                else -&gt; null\n                            }\n                        },\n            popExitTransition = {\n                when (targetState.destination.route) {\n                    \"Red\" -&gt;\n                        slideOutOfContainer(AnimatedContentScope.SlideDirection.Right, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            }\n        ) { BlueScreen(navController) }\n        composable(\n            \"Red\",\n            enterTransition = {\n                when (initialState.destination.route) {\n                    \"Blue\" -&gt;\n                        slideIntoContainer(AnimatedContentScope.SlideDirection.Left, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            },\n            exitTransition = {\n                when (targetState.destination.route) {\n                    \"Blue\" -&gt;\n                        slideOutOfContainer(AnimatedContentScope.SlideDirection.Left, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            },\n            popEnterTransition = {\n                when (initialState.destination.route) {\n                    \"Blue\" -&gt;\n                        slideIntoContainer(AnimatedContentScope.SlideDirection.Right, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            },\n            popExitTransition = {\n                when (targetState.destination.route) {\n                    \"Blue\" -&gt;\n                        slideOutOfContainer(AnimatedContentScope.SlideDirection.Right, animationSpec = tween(700))\n                    else -&gt; null\n                }\n            }\n        ) { RedScreen(navController) }\n    }\n}\n</code></pre> <p>For more examples, refer to the samples.</p>"},{"location":"navigation-animation/#migration_1","title":"Migration","text":"<p>To migrate from using the Navigation Compose APIs do the following:</p> <ul> <li>Replace <code>rememberNavController()</code> with <code>rememberAnimatedNavController()</code></li> <li>Replace <code>NavHost</code> with <code>AnimatedNavHost</code></li> <li>Replace <code>import androidx.navigation.compose.navigation</code> with <code>import com.google.accompanist.navigation.animation.navigation</code></li> <li>Replace <code>import androidx.navigation.compose.composable</code> with <code>import com.google.accompanist.navigation.animation.composable</code></li> </ul> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p> <p>For more details see Animations in Navigation Compose</p>"},{"location":"navigation-material/","title":"Jetpack Navigation Compose Material","text":"<p>A library which provides Compose Material support for Jetpack Navigation Compose. This features composable bottom sheet destinations.</p> <p>Warning</p> <p>The navigation APIs are currently experimental and they could change at any time. All of the APIs are marked with the <code>@ExperimentalMaterialNavigationApi</code> annotation.</p>"},{"location":"navigation-material/#usage","title":"Usage","text":""},{"location":"navigation-material/#bottom-sheet-destinations","title":"Bottom Sheet Destinations","text":"<ol> <li> <p>Create a <code>BottomSheetNavigator</code> and add it to the <code>NavController</code>:</p> <pre><code>@Composable\nfun MyApp() {\n    val bottomSheetNavigator = rememberBottomSheetNavigator()\n    val navController = rememberNavController(bottomSheetNavigator)\n}\n</code></pre> </li> <li> <p>Wrap your <code>NavHost</code> in the <code>ModalBottomSheetLayout</code> composable that accepts a <code>BottomSheetNavigator</code>.</p> <pre><code>@Composable\nfun MyApp() {\n    val bottomSheetNavigator = rememberBottomSheetNavigator()\n    val navController = rememberNavController(bottomSheetNavigator)\n    ModalBottomSheetLayout(bottomSheetNavigator) {\n        NavHost(navController, \"home\") {\n           // We'll define our graph here in a bit!\n        }\n    }\n}\n</code></pre> </li> <li> <p>Register a bottom sheet destination</p> <pre><code>@Composable\nfun MyApp() {\n    val bottomSheetNavigator = rememberBottomSheetNavigator()\n    val navController = rememberNavController(bottomSheetNavigator)\n    ModalBottomSheetLayout(bottomSheetNavigator) {\n        NavHost(navController, \"home\") {\n           composable(route = \"home\") {\n               ...\n           }\n           bottomSheet(route = \"sheet\") {\n               Text(\"This is a cool bottom sheet!\")\n           }\n        }\n    }\n}\n</code></pre> </li> </ol> <p>For more examples, refer to the samples.</p>"},{"location":"navigation-material/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-navigation-material:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"pager/","title":"Pager layouts","text":"<p>A library which provides paging layouts for Jetpack Compose. If you've used Android's <code>ViewPager</code> before, it has similar properties.</p> <p>Warning</p> <p>This library is deprecated, with official pager support in androidx.compose.foundation.pager. The original documentation is below the migration guide.</p>"},{"location":"pager/#migration","title":"Migration","text":"<ol> <li>Make sure you are using Compose 1.4.0+ before attempting to migrate to <code>androidx.compose.foundation.pager</code>.</li> <li>Change <code>com.google.accompanist.pager.HorizontalPager</code> to <code>androidx.compose.foundation.pager.HorizontalPager</code>, and the same for <code>com.google.accompanist.pager.VerticalPager</code> to change to <code>androidx.compose.foundation.pager.VerticalPager</code></li> <li>Change <code>count</code> variable to <code>pageCount</code>.</li> <li>Change <code>itemSpacing</code> parameter to <code>pageSpacing</code>.</li> <li>Change any usages of <code>rememberPagerState()</code> to <code>androidx.compose.foundation.pager.rememberPagerState()</code></li> <li>For more mappings - see the migration table below.</li> <li>Run your changes on device and check to see if there are any differences.</li> </ol> <p>One thing to note is that there is a new parameter on <code>androidx.compose.foundation.Pager</code>, for <code>pageSize</code>, by default this uses a <code>PageSize.Fill</code>, but can also be changed to use a fixed size, like <code>PageSize.Fixed(200.dp)</code> for a fixed size paging.</p>"},{"location":"pager/#migration-table","title":"Migration Table","text":"<p>The following is a mapping of the pager classes from accompanist to androidx.compose:</p> accompanist/pager androidx.compose.foundation <code>HorizontalPager</code> <code>androidx.compose.foundation.pager.HorizontalPager</code> <code>VerticalPager</code> <code>androidx.compose.foundation.pager.VerticalPager</code> <code>rememberPagerState</code> <code>androidx.compose.foundation.pager.rememberPagerState</code> <code>PagerState#pageCount</code> Use <code>canScrollForward</code> or <code>canScrollBackward</code> <code>calculateCurrentOffsetForPage</code> Use <code>(pagerState.currentPage - page) + pagerState.currentPageOffsetFraction</code> <code>PagerState#currentPageOffset</code> <code>PagerState#currentPageOffsetFraction</code> <code>Modifier.pagerTabIndicatorOffset()</code> Implement it yourself, or fork <code>accompanist-pager-indicators</code> implementation <code>HorizontalPagerIndicator</code> Implement it yourself, or fork <code>accompanist-pager-indicators</code> implementation <code>VerticalPagerIndicator</code> Implement it yourself, or fork <code>accompanist-pager-indicators</code> implementation <code>PagerDefaults.flingBehavior()</code> <code>androidx.compose.foundation.pager.PagerDefaults.flingBehavior()</code> <p>The biggest change is that <code>HorizontalPager</code> and <code>VerticalPager</code>'s number of pages is now called <code>pageCount</code> instead of <code>count</code>.</p>"},{"location":"pager/#deprecated-guidance-for-accompanist-pager","title":"Deprecated Guidance for Accompanist Pager","text":"<p>The following is the deprecated guide for using Pager in Accompanist. Please see above migration section for how to use the <code>androidx.compose</code> Pager.</p>"},{"location":"pager/#horizontalpager","title":"HorizontalPager","text":"<p><code>HorizontalPager</code> is a layout which lays out items in a horizontal row, and allows the user to horizontally swipe between pages.</p>          Your browser does not support the video tag.      HorizontalPager demo <p>The simplest usage looks like the following:</p> <pre><code>// Display 10 items\nHorizontalPager(count = 10) { page -&gt;\n    // Our page content\n    Text(\n        text = \"Page: $page\",\n        modifier = Modifier.fillMaxWidth()\n    )\n}\n</code></pre> <p>If you want to jump to a specific page, you either call call <code>pagerState.scrollToPage(index)</code> or  <code>pagerState.animateScrollToPage(index)</code> method in a <code>CoroutineScope</code>.</p> <pre><code>val pagerState = rememberPagerState()\n\nHorizontalPager(count = 10, state = pagerState) { page -&gt;\n    // ...page content\n}\n\n// Later, scroll to page 2\nscope.launch {\n    pagerState.scrollToPage(2)\n}\n</code></pre>"},{"location":"pager/#verticalpager","title":"VerticalPager","text":"<p><code>VerticalPager</code> is very similar to <code>HorizontalPager</code> but items are laid out vertically, and react to vertical swipes:</p>          Your browser does not support the video tag.      VerticalPager demo <pre><code>// Display 10 items\nVerticalPager(count = 10) { page -&gt;\n    // Our page content\n    Text(\n        text = \"Page: $page\",\n        modifier = Modifier.fillMaxWidth()\n    )\n}\n</code></pre>"},{"location":"pager/#lazy-creation","title":"Lazy creation","text":"<p>Pages in both <code>HorizontalPager</code> and <code>VerticalPager</code> are lazily composed and laid-out as required by the layout. As the user scrolls through pages, any pages which are no longer required are removed from the content.</p> <p>Under the covers, <code>HorizontalPager</code> use <code>LazyRow</code>, and <code>VerticalPager</code> uses <code>LazyColumn</code>.</p>"},{"location":"pager/#content-padding","title":"Content Padding","text":"<p><code>HorizontalPager</code> and <code>VerticalPager</code> both support the setting of content padding, which allows you to influence the maximum size and alignment of pages.</p> <p>You can see how different content padding values affect a <code>HorizontalPager</code> below:</p> start = 64.dphorizontal = 32.dpend = 64.dp <p>Setting the start padding has the effect of aligning the pages towards the end.</p> <p></p> <pre><code>HorizontalPager(\n    count = 4,\n    contentPadding = PaddingValues(start = 64.dp),\n) { page -&gt;\n    // page content\n}\n</code></pre> <p>Setting both the start and end padding to the same value has the effect of centering the item horizontally.</p> <p></p> <pre><code>HorizontalPager(\n    count = 4,\n    contentPadding = PaddingValues(horizontal = 32.dp),\n) { page -&gt;\n    // page content\n}\n</code></pre> <p>Setting the end padding has the effect of aligning the pages towards the start.</p> <p></p> <pre><code>HorizontalPager(\n    count = 4,\n    contentPadding = PaddingValues(end = 64.dp),\n) { page -&gt;\n    // page content\n}\n</code></pre> <p>Similar effects for <code>VerticalPager</code> can be achieved by setting the <code>top</code> and <code>bottom</code> values. The value <code>32.dp</code> is only used here as an example, you can set each of the padding dimensions to whatever value you wish.</p>"},{"location":"pager/#item-scroll-effects","title":"Item scroll effects","text":"<p>A common use-case is to apply effects to your pager items, using the scroll position to drive those effects.</p> <p>The HorizontalPagerTransitionSample demonstrates how this can be done:</p>          Your browser does not support the video tag.      Item effects demo <p>The scope provided to your pager content allows apps to easily reference the <code>currentPage</code> and <code>currentPageOffset</code>. The effects can then be calculated using those values. We provide the <code>calculateCurrentOffsetForPage()</code> extension functions to support calculation of the 'offset' for a given page:</p> <pre><code>import com.google.accompanist.pager.calculateCurrentOffsetForPage\n\nHorizontalPager(count = 4) { page -&gt;\n    Card(\n        Modifier\n            .graphicsLayer {\n                // Calculate the absolute offset for the current page from the\n                // scroll position. We use the absolute value which allows us to mirror\n                // any effects for both directions\n                val pageOffset = calculateCurrentOffsetForPage(page).absoluteValue\n\n                // We animate the scaleX + scaleY, between 85% and 100%\n                lerp(\n                    start = 0.85f,\n                    stop = 1f,\n                    fraction = 1f - pageOffset.coerceIn(0f, 1f)\n                ).also { scale -&gt;\n                    scaleX = scale\n                    scaleY = scale\n                }\n\n                // We animate the alpha, between 50% and 100%\n                alpha = lerp(\n                    start = 0.5f,\n                    stop = 1f,\n                    fraction = 1f - pageOffset.coerceIn(0f, 1f)\n                )\n            }\n    ) {\n        // Card content\n    }\n}\n</code></pre>"},{"location":"pager/#reacting-to-page-changes","title":"Reacting to page changes","text":"<p>The <code>PagerState.currentPage</code> property is updated whenever the selected page changes. You can use the <code>snapshotFlow</code> function to observe changes in a flow:</p> <pre><code>val pagerState = rememberPagerState()\n\nLaunchedEffect(pagerState) {\n    // Collect from the pager state a snapshotFlow reading the currentPage\n    snapshotFlow { pagerState.currentPage }.collect { page -&gt;\n        AnalyticsService.sendPageSelectedEvent(page)\n    }\n}\n\nVerticalPager(\n    count = 10,\n    state = pagerState,\n) { page -&gt;\n    Text(text = \"Page: $page\")\n}\n</code></pre>"},{"location":"pager/#indicators","title":"Indicators","text":"<p>We also publish a sibling library called <code>pager-indicators</code> which provides some simple indicator composables for use with <code>HorizontalPager</code> and <code>VerticalPager</code>.</p>          Your browser does not support the video tag.      Pager indicators demo <p>The HorizontalPagerWithIndicatorSample and VerticalPagerWithIndicatorSample show you how to use these.</p>"},{"location":"pager/#integration-with-tabs","title":"Integration with Tabs","text":"<p>A common use-case for <code>HorizontalPager</code> is to be used in conjunction with a <code>TabRow</code> or <code>ScrollableTabRow</code>.</p>          Your browser does not support the video tag.      HorizontalPager + TabRow <p>Provided in the <code>pager-indicators</code> library is a modifier which can be used on a tab indicator like so:</p> <pre><code>val pagerState = rememberPagerState()\n\nTabRow(\n    // Our selected tab is our current page\n    selectedTabIndex = pagerState.currentPage,\n    // Override the indicator, using the provided pagerTabIndicatorOffset modifier\n    indicator = { tabPositions -&gt;\n        TabRowDefaults.Indicator(\n            Modifier.pagerTabIndicatorOffset(pagerState, tabPositions)\n        )\n    }\n) {\n    // Add tabs for all of our pages\n    pages.forEachIndexed { index, title -&gt;\n        Tab(\n            text = { Text(title) },\n            selected = pagerState.currentPage == index,\n            onClick = { /* TODO */ },\n        )\n    }\n}\n\nHorizontalPager(\n    count = pages.size,\n    state = pagerState,\n) { page -&gt;\n    // TODO: page content\n}\n</code></pre>"},{"location":"pager/#changes-in-v0190","title":"Changes in v0.19.0","text":"<p>In v0.19.0 both <code>HorizontalPager</code> and <code>VerticalPager</code> were re-written to be based on <code>LazyRow</code> and <code>LazyColumn</code> respectively. As part of this change, a number of feature and API changes were made:</p>"},{"location":"pager/#pagerstate","title":"PagerState","text":"<ul> <li>The <code>pageCount</code> parameter on <code>rememberPagerState()</code> has been removed, replaced with the <code>count</code> parameter on <code>HorizontalPager()</code> and <code>VerticalPager()</code>.</li> <li>The <code>animationSpec</code>, <code>initialVelocity</code> and <code>skipPages</code> parameters on <code>animateScrollToPage()</code> have been removed. The lazy components handle this automatically.</li> </ul>"},{"location":"pager/#horizontalpager-verticalpager","title":"HorizontalPager &amp; VerticalPager","text":"<ul> <li>Ability to set <code>contentPadding</code> (see above).</li> <li>Ability to specify a <code>key</code> for each page.</li> <li>The <code>horizontalAlignment</code> parameter on <code>HorizontalPager</code>, and the <code>verticalAlignment</code> parameter on <code>VerticalPager</code> have been removed. A similar effect can be implemented with an appropriate content padding (see above).</li> <li>The <code>infiniteLooping</code> parameter and feature have been removed. A sample demonstrating how to achieve this effect can be found here.</li> <li>The <code>offscreenLimit</code> parameter has been removed. We no longer have control of what items are laid out 'off screen'.</li> <li>The <code>dragEnabled</code> parameter has removed.</li> <li><code>PagerScope</code> (the page item scope) no longer implements <code>BoxScope</code>.</li> </ul>"},{"location":"pager/#usage","title":"Usage","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-pager:&lt;version&gt;\"\n\n    // If using indicators, also depend on\n    implementation \"com.google.accompanist:accompanist-pager-indicators:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"pager/#library-snapshots","title":"Library Snapshots","text":"<p>Snapshots of the current development version of this library are available, which track the latest commit. See here for more information on how to use them.</p>"},{"location":"pager/#contributions","title":"Contributions","text":"<p>Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.</p>"},{"location":"pager/#license","title":"License","text":"<pre><code>Copyright 2021 The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"permissions/","title":"Jetpack Compose Permissions","text":"<p>A library which provides Android runtime permissions support for Jetpack Compose.</p> <p>Warning</p> <p>The permission APIs are currently experimental and they could change at any time. All of the APIs are marked with the <code>@ExperimentalPermissionsApi</code> annotation.</p>"},{"location":"permissions/#usage","title":"Usage","text":""},{"location":"permissions/#rememberpermissionstate-and-remembermultiplepermissionsstate-apis","title":"<code>rememberPermissionState</code> and <code>rememberMultiplePermissionsState</code> APIs","text":"<p>The <code>rememberPermissionState(permission: String)</code> API allows you to request a certain permission to the user and check for the status of the permission. <code>rememberMultiplePermissionsState(permissions: List&lt;String&gt;)</code> offers the same but for multiple permissions at the same time.</p> <p>Both APIs expose properties for you to follow the workflow as described in the permissions documentation.</p> <p>Caution</p> <p>The call to the method that requests the permission to the user (e.g. <code>PermissionState.launchPermissionRequest()</code>) needs to be invoked from a non-composable scope. For example, from a side-effect or from a non-composable callback such as a <code>Button</code>'s <code>onClick</code> lambda.</p> <p>The following code exercises the permission request workflow.</p> <pre><code>@OptIn(ExperimentalPermissionsApi::class)\n@Composable\nprivate fun FeatureThatRequiresCameraPermission() {\n\n    // Camera permission state\n    val cameraPermissionState = rememberPermissionState(\n        android.Manifest.permission.CAMERA\n    )\n\n    if (cameraPermissionState.status.isGranted) {\n        Text(\"Camera permission Granted\")\n    } else {\n        Column {\n            val textToShow = if (cameraPermissionState.status.shouldShowRationale) {\n                // If the user has denied the permission but the rationale can be shown,\n                // then gently explain why the app requires this permission\n                \"The camera is important for this app. Please grant the permission.\"\n            } else {\n                // If it's the first time the user lands on this feature, or the user\n                // doesn't want to be asked again for this permission, explain that the\n                // permission is required\n                \"Camera permission required for this feature to be available. \" +\n                    \"Please grant the permission\"\n            }\n            Text(textToShow)\n            Button(onClick = { cameraPermissionState.launchPermissionRequest() }) {\n                Text(\"Request permission\")\n            }\n        }\n    }\n}\n</code></pre> <p>For more examples, refer to the samples.</p>"},{"location":"permissions/#limitations","title":"Limitations","text":"<p>This permissions wrapper is built on top of the available Android platform APIs. We cannot extend the platform's capabilities. For example, it's not possible to differentiate between the it's the first time requesting the permission vs the user doesn't want to be asked again use cases.</p>"},{"location":"permissions/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-permissions:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"placeholder/","title":"Placeholder","text":"<p>Warning</p> <p>This library is deprecated, and the API is no longer maintained. We recommend forking the implementation and customising it to your needs. The original documentation is below.</p> <p>A library which provides a modifier for display 'placeholder' UI while content is loading.</p> <p>More information on the UX provided by this library can be found on the Material Theming Placeholder UI guidelines.</p> <p>There are actually two versions of the library available:</p> <ul> <li>Placeholder Foundation: Provides the base functionality and depends on Jetpack Compose Foundation. This version requires the app to provide all of the colors to display.</li> <li>Placeholder Material. This uses the foundation library above, but also provides sensible default colors using your app's Material color palette.</li> </ul> <p>Tip</p> <p>You only need to use one of the libraries, and most apps should use Placeholder Material. The APIs of the libraries are (mostly) equivalent with only the imports being different. Where possible we have provided equivalent code samples below.</p>"},{"location":"placeholder/#basic-usage","title":"Basic usage","text":"<p>At the most basic usage, the modifier will draw a shape over your composable content, filled with the provided color.</p> <p></p> Placeholder MaterialPlaceholder Foundation <pre><code>import com.google.accompanist.placeholder.material.placeholder\n\nText(\n    text = \"Content to display after content has loaded\",\n    modifier = Modifier\n        .padding(16.dp)\n        .placeholder(visible = true)\n)\n</code></pre> <pre><code>import com.google.accompanist.placeholder.placeholder\n\nText(\n    text = \"Content to display after content has loaded\",\n    modifier = Modifier\n        .padding(16.dp)\n        .placeholder(\n            visible = true,\n            color = Color.Gray,\n            // optional, defaults to RectangleShape\n            shape = RoundedCornerShape(4.dp),\n        )\n)\n</code></pre>"},{"location":"placeholder/#placeholder-highlights","title":"Placeholder highlights","text":"<p>The library also provides some 'highlight' animations to entertain the user while they are waiting. There are two provided by the library, but you can also provide your own.</p>"},{"location":"placeholder/#fade","title":"Fade","text":"<p>This highlight fades a color over the entire placeholder in and out.</p>          Your browser does not support the video tag.      Placeholder Fade demo Placeholder MaterialPlaceholder Foundation <pre><code>import com.google.accompanist.placeholder.PlaceholderHighlight\nimport com.google.accompanist.placeholder.material.placeholder\nimport com.google.accompanist.placeholder.material.fade\n\nText(\n    text = \"Content to display after content has loaded\",\n    modifier = Modifier\n        .padding(16.dp)\n        .placeholder(\n            visible = true,\n            highlight = PlaceholderHighlight.fade(),\n        )\n)\n</code></pre> <pre><code>import com.google.accompanist.placeholder.PlaceholderHighlight\nimport com.google.accompanist.placeholder.placeholder\nimport com.google.accompanist.placeholder.fade\n\nText(\n    text = \"Content to display after content has loaded\",\n    modifier = Modifier\n        .padding(16.dp)\n        .placeholder(\n            visible = true,\n            color = Color.Gray,\n            // optional, defaults to RectangleShape\n            shape = RoundedCornerShape(4.dp),\n            highlight = PlaceholderHighlight.fade(\n                highlightColor = Color.White,\n            ),\n        )\n)\n</code></pre>"},{"location":"placeholder/#shimmer","title":"Shimmer","text":"<p>This displays a gradient shimmer effect which emanates from the top-start corner.</p>          Your browser does not support the video tag.      Placeholder Shimmer demo Placeholder MaterialPlaceholder Foundation <pre><code>import com.google.accompanist.placeholder.PlaceholderHighlight\nimport com.google.accompanist.placeholder.material.placeholder\nimport com.google.accompanist.placeholder.material.shimmer\n\nText(\n    text = \"Content to display after content has loaded\",\n    modifier = Modifier\n        .padding(16.dp)\n        .placeholder(\n            visible = true,\n            highlight = PlaceholderHighlight.shimmer(),\n        )\n)\n</code></pre> <pre><code>import com.google.accompanist.placeholder.PlaceholderHighlight\nimport com.google.accompanist.placeholder.placeholder\nimport com.google.accompanist.placeholder.shimmer\n\nText(\n    text = \"Content to display after content has loaded\",\n    modifier = Modifier\n        .padding(16.dp)\n        .placeholder(\n            visible = true,\n            color = Color.Gray,\n            // optional, defaults to RectangleShape\n            shape = RoundedCornerShape(4.dp),\n            highlight = PlaceholderHighlight.shimmer(\n                highlightColor = Color.White,\n            ),\n        )\n)\n</code></pre>"},{"location":"placeholder/#usage","title":"Usage","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    // If you're using Material, use accompanist-placeholder-material\n    implementation \"com.google.accompanist:accompanist-placeholder-material:&lt;version&gt;\"\n\n    // Otherwise use the foundation version\n    implementation \"com.google.accompanist:accompanist-placeholder:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"placeholder/#library-snapshots","title":"Library Snapshots","text":"<p>Snapshots of the current development version of this library are available, which track the latest commit. See here for more information on how to use them.</p>"},{"location":"placeholder/#contributions","title":"Contributions","text":"<p>Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.</p>"},{"location":"placeholder/#license","title":"License","text":"<pre><code>Copyright 2021 The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"swiperefresh/","title":"Swipe Refresh for Jetpack Compose","text":"<p>Warning</p> <p>This library is deprecated, with official pull refresh support in androidx.compose.material.pullrefresh. The migration guide and original documentation is below.</p>"},{"location":"swiperefresh/#migration","title":"Migration","text":"<p>Accompanist SwipeRefresh has been replaced by PullRefresh in Compose Material 1.3.0. The implementation is similar but instead of being a Composable function, it is a Modifier that can be applied to a Composable function.</p> <p>A simple example is as follows:</p> <pre><code>val viewModel: MyViewModel = viewModel()\nval refreshing by viewModel.isRefreshing\n\nval pullRefreshState = rememberPullRefreshState(refreshing, { viewModel.refresh() })\n\nBox(Modifier.pullRefresh(pullRefreshState)) {\n    LazyColumn(Modifier.fillMaxSize()) {\n        ...\n    }\n\n    PullRefreshIndicator(refreshing, pullRefreshState, Modifier.align(Alignment.TopCenter))\n}\n</code></pre>"},{"location":"swiperefresh/#migration-steps","title":"Migration steps","text":"<ol> <li>Replace SwipeRefresh with a Box or other layout of your choice, save your <code>onRefresh</code> lambda for the next step.</li> <li>Replace <code>rememberSwipeRefreshState()</code> with <code>rememberPullRefreshState(refreshing, onRefresh)</code></li> <li>Add either the default <code>PullRefreshIndicator</code> or your own custom implementation to your layout.</li> </ol>"},{"location":"swiperefresh/#custom-indicator","title":"Custom Indicator","text":"<p>Instead of using the provided <code>PullRefreshIndicator</code> composable, you can create your own custom indicator. A full sample can be seen in the Compose samples.</p>"},{"location":"swiperefresh/#original-docs","title":"Original Docs","text":"<p>A library which provides a layout which provides the swipe-to-refresh UX pattern, similar to Android's <code>SwipeRefreshLayout</code>.</p>          Your browser does not support the video tag.      SwipeRefresh demo"},{"location":"swiperefresh/#usage","title":"Usage","text":"<p>To implement this UX pattern there are two key APIs which are needed: <code>SwipeRefresh</code>, which is provides the layout, and <code>rememberSwipeRefreshState()</code> which provides some remembered state.</p> <p>The basic usage of a <code>SwipeRefresh</code> using a ViewModel looks like so:</p> <pre><code>val viewModel: MyViewModel = viewModel()\nval isRefreshing by viewModel.isRefreshing.collectAsState()\n\nSwipeRefresh(\n    state = rememberSwipeRefreshState(isRefreshing),\n    onRefresh = { viewModel.refresh() },\n) {\n    LazyColumn {\n        items(30) { index -&gt;\n            // TODO: list items\n        }\n    }\n}\n</code></pre> <p>The full example, including the view model implementation can be found here.</p> <p>The content needs to be 'vertically scrollable' for <code>SwipeRefresh()</code> to be able to react to swipe gestures. Layouts such as <code>LazyColumn</code> are automatically vertically scrollable, but others such as <code>Column</code> or <code>LazyRow</code> are not. In those instances, you can provide a <code>Modifier.verticalScroll</code> modifier to that content like so:</p> <pre><code>SwipeRefresh(\n    // ...\n) {\n    Column(Modifier.verticalScroll(rememberScrollState())) {\n        // content\n    }\n}\n</code></pre>"},{"location":"swiperefresh/#indicating-a-refresh-without-swiping","title":"Indicating a refresh without swiping","text":"<p>As this library is built with a separate state object, it's easy to display a refreshing indicator without a swipe to triggering it.</p> <p>The unrealistic example below displays a forever refreshing indicator:</p> <pre><code>val swipeRefreshState = rememberSwipeRefreshState(true)\n\nSwipeRefresh(\n    state = swipeRefreshState,\n    onRefresh = { /* todo */ },\n) {\n    LazyColumn {\n        items(30) { index -&gt;\n            // TODO: list items\n        }\n    }\n}\n</code></pre>"},{"location":"swiperefresh/#indicator","title":"Indicator","text":"<p>The library provides a default indicator: <code>SwipeRefreshIndicator()</code>, which <code>SwipeRefresh</code> uses automatically. You can customize the default indicator, and even provide your own indicator content using the <code>indicator</code> slot.</p>"},{"location":"swiperefresh/#customizing-default-indicator","title":"Customizing default indicator","text":"<p>To customize the default indicator, we can provide our own <code>indicator</code> content block, to call <code>SwipeRefreshIndicator()</code> with customized parameters:</p> SampleDemo video <pre><code>SwipeRefresh(\n    state = /* ... */,\n    onRefresh = /* ... */,\n    indicator = { state, trigger -&gt;\n        SwipeRefreshIndicator(\n            // Pass the SwipeRefreshState + trigger through\n            state = state,\n            refreshTriggerDistance = trigger,\n            // Enable the scale animation\n            scale = true,\n            // Change the color and shape\n            backgroundColor = MaterialTheme.colors.primary,\n            shape = MaterialTheme.shapes.small,\n        )\n    }\n)\n</code></pre> <p>          Your browser does not support the video tag.      Tweaked indicator demo </p>"},{"location":"swiperefresh/#custom-indicator_1","title":"Custom indicator","text":"<p>As mentioned, you can also provide your own custom indicator content. A <code>SwipeRefreshState</code> is provided to <code>indicator</code> content slot, which contains the information necessary to react to a swipe refresh gesture.</p> <p>An example of a custom indicator is provided here.</p>"},{"location":"swiperefresh/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-swiperefresh:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"systemuicontroller/","title":"System UI Controller for Jetpack Compose","text":"<p>Warning</p> <p>This library is deprecated, and the API is no longer maintained. We recommend forking the implementation and customising it to your needs. The original documentation is below.</p>"},{"location":"systemuicontroller/#migration","title":"Migration","text":"<p>Recommendation: If you were using SystemUIController to go edge-to-edge in your activity and change the system bar colors and system bar icon colors, use the new Activity.enableEdgeToEdge method available in androidx.activity 1.8.0-alpha03 and later. This method backports the scrims used on some versions of Android. This is a sample PR of the migration to the new method and removing the dependency on SystemUIController in Now in Android.</p> <p>For other usages, migrate to using WindowInsetsControllerCompat or window APIs directly.</p>"},{"location":"systemuicontroller/#original-documentation","title":"Original Documentation","text":"<p>System UI Controller provides easy-to-use utilities for updating the System UI bar colors within Jetpack Compose.</p>"},{"location":"systemuicontroller/#usage","title":"Usage","text":"<p>To control the system UI in your composables, you need to get a <code>SystemUiController</code> instance. The library provides the <code>rememberSystemUiController()</code> function which returns an instance for the current system (currently only Android).</p> <p>In your layouts you can update the system bar colors like so:</p> <pre><code>// Remember a SystemUiController\nval systemUiController = rememberSystemUiController()\nval useDarkIcons = !isSystemInDarkTheme()\n\nDisposableEffect(systemUiController, useDarkIcons) {\n    // Update all of the system bar colors to be transparent, and use\n    // dark icons if we're in light theme\n    systemUiController.setSystemBarsColor(\n        color = Color.Transparent,\n        darkIcons = useDarkIcons\n    )\n\n    // setStatusBarColor() and setNavigationBarColor() also exist\n\n    onDispose {}\n}\n</code></pre>"},{"location":"systemuicontroller/#system-bar-icon-colors","title":"System bar icon colors","text":"<p>The library automatically handles API level differences when running on Android devices. If we look at the example of status bar icons, Android only natively supports dark icons on API 23+. This library handles this by automatically altering the requested color with a scrim, to maintain contrast:</p> <p></p> <p>Similar happens on navigation bar color, which is only available on API 26+.</p>"},{"location":"systemuicontroller/#modifying-scrim-logic","title":"Modifying scrim logic","text":"<p>The scrim logic can be modified if needed:</p> <pre><code>systemUiController.setStatusBarColor(\n    color = Color.Transparent,\n    darkIcons = true\n) { requestedColor -&gt;\n    // TODO: return a darkened color to be used when the system doesn't\n    // natively support dark icons\n}\n</code></pre>"},{"location":"systemuicontroller/#samples","title":"Samples","text":"<p>For complete samples, check out the Insets samples which all use <code>SystemUiController</code> to set transparent system bars.</p>"},{"location":"systemuicontroller/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-systemuicontroller:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"testharness/","title":"Test Harness for Jetpack Compose","text":"<p>Warning</p> <p>This library is deprecated, with a superseding version in androidx.compose.ui.test. The migration guide and original documentation is below.</p>"},{"location":"testharness/#migration","title":"Migration","text":"<p><code>DeviceConfigurationOverride</code> from <code>ui-test</code> is the replacement for <code>TestHarness</code>.</p> <p>The top-level <code>@Composable DeviceConfigurationOverride</code> provides the same structure as <code>TestHarness</code>, applying overrides to a piece of <code>content</code> under test.</p> <p>Instead of all of the overrides appearing as parameters to <code>TestHarness</code>, the <code>DeviceConfigurationOverride</code> top-level function takes a particular implementation of the <code>fun interface DeviceConfigurationOverride</code>.</p> <p>The built-in <code>DeviceConfigurationOverride</code>s are available as extension methods on the companion object of <code>DeviceConfigurationOverride</code>, and the built-in overrides cover all of the parameters of <code>TestHarness</code>.</p> <p>Multiple <code>DeviceConfigurationOverride</code>s can be combined with then</p>"},{"location":"testharness/#migration-steps","title":"Migration steps:","text":"<ol> <li>Replace <code>TestHarness()</code> with <code>DeviceConfigurationOverride()</code> (a deprecation replacement is    available)</li> <li>Remove the override for any argument that was previously using a default value.    Because the overrides have been split into independent overrides, the \"default\" behavior can    be achieved by not specifying that override.</li> </ol> <p>Example: If you want to keep the current dark mode setting and not override it, instead of    querying for and specifying the current dark mode theme to apply in an override, don't apply the    <code>DeviceConfigurationOverride.DarkMode</code> override.</p>"},{"location":"testharness/#original-docs","title":"Original docs","text":"<p>A library providing a test harness for UI components.</p>"},{"location":"testharness/#background","title":"Background","text":"<p>Device configuration (locale, font size, screen size, folding features, etc.) are device-wide properties, which makes it hard to automate tests that wants to vary these properties. One current solution is to run tests across a range of emulators or devices with different properties, and potentially filter tests to only run when specific conditions are met. This has the downside of increasing the number of devices to manage, higher complexity of configuring those devices, and more complicated test suites.</p> <p>With a Compose-only app, it is less common that the \u201cphysical\u201d constraints of the device are directly used. Instead, state hoisting encourages isolating such constraints, and providing them to components via state that is observable via snapshots. The mechanism to do so is primarily via a set of composition locals, such as <code>LocalConfiguration</code>, <code>LocalDensity</code>, and others. The composition local mechanism provides a layer of indirection that permits overriding these constraints via those composition local hooks.</p>"},{"location":"testharness/#test-harness","title":"Test Harness","text":"<p><code>TestHarness</code> is an <code>@Composable</code> function, which takes a single slot of <code>@Composable</code> content. This content is the <code>@Composable</code> UI under test, so standard usage would look like the following:</p> <pre><code>@Test\nfun example() {\n    composeTestRule.setContent {\n        TestHarness {\n            MyComponent()\n        }\n    }\n\n    // assertions\n}\n</code></pre> <p>When no parameters of <code>TestHarness</code> are specified, <code>TestHarness</code> has no direct effect, and it would be equivalent to calling <code>MyComponent</code> directly.</p> <p>Specifying parameters of <code>TestHarness</code> results in overriding the default configuration for the content under-test, and will affect <code>MyComponent</code>.</p> <p>For example, specifying the <code>fontScale</code> parameter will change the effective font scale within the <code>TestHarness</code>:</p> <pre><code>@Test\nfun example() {\n    composeTestRule.setContent {\n        TestHarness(fontScale = 1.5f) {\n            Text(\"Configuration: ${LocalConfiguration.current.fontScale}\")\n            Text(\"Density: ${LocalDensity.current.fontScale}\")\n        }\n    }\n\n    composeTestRule.onNodeWithText(\"Configuration: 1.5\").assertExists()\n    composeTestRule.onNodeWithText(\"Density: 1.5\").assertExists()\n}\n</code></pre> <p>This allows testing UI for different font scales in a isolated way, without having to directly configure the device to use a different font scale.</p> <p><code>TestHarness</code> also takes a <code>size: DpSize</code> parameter, to test a Composable at a particular size.</p> <pre><code>@Test\nfun example() {\n    composeTestRule.setContent {\n        TestHarness(size = DpSize(800.dp, 1000.dp)) {\n            MyComponent() // will be rendered at 800dp by 1000dp, even if the window is smaller\n        }\n    }\n}\n</code></pre> <p>See the full list of parameters and effects below.</p>"},{"location":"testharness/#parameters","title":"Parameters","text":"<p>The full list of parameters and their effects:</p> Parameter Default value Effect <code>size: DpSize</code> <code>DpSize.Unspecified</code> If specified, overrides <code>LocalDensity</code> if needed to give the <code>DpSize</code> amount of space to the composable under test <code>darkMode: Boolean</code> <code>isSystemInDarkTheme()</code> Overrides <code>LocalConfiguration.current.uiMode</code> <code>fontScale: Float</code> <code>LocalDensity.current.fontScale</code> Overrides <code>LocalDensity.current.fontScale</code> and <code>LocalConfiguration.current.fontScale</code> <code>fontWeightAdjustment: Int?</code> <code>LocalConfiguration.current.fontWeightAdjustment</code> on API 31 and above, otherwise <code>null</code> Overrides <code>LocalConfiguration.current.fontWeightAdjustment</code> on API 31 and above and not-null <code>locales: LocaleListCompat</code> <code>ConfigurationCompat.getLocales(LocalConfiguration.current)</code> Overrides <code>LocalConfiguration.current.locales</code> <code>layoutDirection: LayoutDirection?</code> <code>null</code> (which uses the resulting locale layout direction) Overrides <code>LocalLayoutDirection.current</code> and <code>LocalConfiguration.current.screenLayout</code>"},{"location":"testharness/#implementation","title":"Implementation","text":"<p><code>TestHarness</code> works by overriding a set of composition locals provided to the content under test.</p> <p>The full list of composition locals that may be overridden by various parameters are:</p> <ul> <li><code>LocalConfiguration</code></li> <li><code>LocalContext</code></li> <li><code>LocalLayoutDirection</code></li> <li><code>LocalDensity</code></li> <li><code>LocalFontFamilyResolver</code></li> </ul> <p>Any composable that depends on these composition locals should be testable via the test harness, because they will pull the overridden configuration information from them. This includes configuration-specific resources, because these are pulled from <code>LocalContext</code>.</p> <p>Testing a composable at a smaller size than the real screen space available is straightforward, but testing a composable at a larger size than the real screen space available is not. This is because the library and the testing APIs are sensitive to whether or not a composable is actually rendered within the window of the application.</p> <p>As a solution, <code>TestHarness</code> will override the <code>LocalDensity</code> to shrink the content as necessary for all of the specified <code>size: DpSize</code> to be displayed at once in the window space that is available. This results in the composable under test believing it has the specified space to work with, even if that is larger than the window of the application.</p>"},{"location":"testharness/#limitations","title":"Limitations","text":"<p>The test harness is simulating alternate configurations and sizes, so it does not exactly represent what a user would see on a real device. For that reason, the platform edges where Composables interact with the system more is where the test harness may break down and have issues. An incomplete list includes: dialogs (due to different <code>Window</code> instances), insets, soft keyboard interactions, and interop with <code>View</code>s. The density overriding when specifying a specific size to test a composable at also means that UI might be rendered in atypical ways, especially at the extreme of rendering a very large desktop-size UI on a small portrait phone. The mechanism that the test harness uses is also not suitable for production code: in production, the default configuration as specified by the user and the system should be used.</p> <p>The mechanism that the test harness uses to override the configuration (<code>ContextThemeWrapper</code>) is not fully supported by layoutlib. In particular, alternate resources are available just by using <code>TestHarness</code>.</p>"},{"location":"testharness/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-testharness:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"themeadapter-appcompat/","title":"AppCompat Theme Adapter","text":"<p>Warning</p> <p>This library is deprecated, and the API is no longer maintained. The original documentation is below.</p>"},{"location":"themeadapter-appcompat/#migration","title":"Migration","text":"<p>Recommendation: Use the Material Theme Builder tool, or an alternative design tool, to generate a matching XML and Compose theme implementation for your app. See Migrating XML themes to Compose to learn more.</p> <p>You can checkout Material Design 3 in Compose to learn more about creating and adding theme to your app using Material Theme Builder.</p>"},{"location":"themeadapter-appcompat/#original-documenation","title":"Original Documenation","text":"<p>A library that enables the reuse of AppCompat XML themes, for theming in Jetpack Compose.</p> <p>The basis of theming in Jetpack Compose is the <code>MaterialTheme</code> composable, where you provide <code>Colors</code>, <code>Shapes</code> and <code>Typography</code> instances containing your styling parameters:</p> <pre><code>MaterialTheme(\n    typography = type,\n    colors = colors,\n    shapes = shapes\n) {\n    // Surface, Scaffold, etc\n}\n</code></pre> <p>AppCompat XML themes allow for similar but coarser theming via XML theme attributes, like so:</p> <pre><code>&lt;style name=\"Theme.MyApp\" parent=\"Theme.AppCompat.DayNight\"&gt;\n    &lt;item name=\"colorPrimary\"&gt;@color/purple_500&lt;/item&gt;\n    &lt;item name=\"colorAccent\"&gt;@color/green_200&lt;/item&gt;\n&lt;/style&gt;\n</code></pre> <p>This library attempts to bridge the gap between AppCompat XML themes, and themes in Jetpack Compose, allowing your composable <code>MaterialTheme</code> to be based on the <code>Activity</code>'s XML theme:</p> <pre><code>AppCompatTheme {\n    // MaterialTheme.colors, MaterialTheme.shapes, MaterialTheme.typography\n    // will now contain copies of the context's theme\n}\n</code></pre> <p>This is especially handy when you're migrating an existing app, a fragment (or other UI container) at a time.</p> <p>Caution</p> <p>If you are using Material Design Components in your app, you should use the Material Theme Adapter or Material 3 Theme Adapter instead, as they allow much finer-grained reading of your theme.</p>"},{"location":"themeadapter-appcompat/#customizing-the-theme","title":"Customizing the theme","text":"<p>The <code>AppCompatTheme()</code> function will automatically read the host context's AppCompat theme and pass them to <code>MaterialTheme</code> on your behalf, but if you want to customize the generated values, you can do so via the <code>createAppCompatTheme()</code> function:</p> <pre><code>val context = LocalContext.current\nvar (colors, type) = context.createAppCompatTheme()\n\n// Modify colors or type as required. Then pass them\n// through to MaterialTheme...\n\nMaterialTheme(\n    colors = colors,\n    typography = type\n) {\n    // rest of layout\n}\n</code></pre>"},{"location":"themeadapter-appcompat/#generated-theme","title":"Generated theme","text":"<p>Synthesizing a material theme from a <code>Theme.AppCompat</code> theme is not perfect, since <code>Theme.AppCompat</code> does not expose the same level of customization as is available in material theming. Going through the pillars of material theming:</p>"},{"location":"themeadapter-appcompat/#colors","title":"Colors","text":"<p>AppCompat has a limited set of top-level color attributes, which means that <code>AppCompatTheme()</code> has to generate/select alternative colors in certain situations. The mapping is currently:</p> MaterialTheme color AppCompat attribute primary <code>colorPrimary</code> primaryVariant <code>colorPrimaryDark</code> onPrimary Calculated black/white secondary <code>colorAccent</code> secondaryVariant <code>colorAccent</code> onSecondary Calculated black/white surface Default onSurface <code>android:textColorPrimary</code>, else calculated black/white background <code>android:colorBackground</code> onBackground <code>android:textColorPrimary</code>, else calculated black/white error <code>colorError</code> onError Calculated black/white <p>Where the table says \"calculated black/white\", this means either black/white, depending on which provides the greatest contrast against the corresponding background color.</p>"},{"location":"themeadapter-appcompat/#typography","title":"Typography","text":"<p>AppCompat does not provide any semantic text appearances (such as headline6, body1, etc), and instead relies on text appearances for specific widgets or use cases. As such, the only thing we read from an AppCompat theme is the default <code>app:fontFamily</code> or <code>android:fontFamily</code>. For example:</p> <pre><code>&lt;style name=\"Theme.MyApp\" parent=\"Theme.AppCompat\"&gt;\n    &lt;item name=\"fontFamily\"&gt;@font/my_font&lt;/item&gt;\n&lt;/style&gt;\n</code></pre> <p>Compose does not currently support downloadable fonts, so any font referenced from the theme should from your resources. See here for more information.</p>"},{"location":"themeadapter-appcompat/#shape","title":"Shape","text":"<p>AppCompat has no concept of shape theming, therefore we use the default value from <code>MaterialTheme.shapes</code>. If you wish to provide custom values, use the <code>shapes</code> parameter on <code>AppCompatTheme</code>.</p>"},{"location":"themeadapter-appcompat/#limitations","title":"Limitations","text":"<p>There are some known limitations with the implementation at the moment:</p> <ul> <li>This relies on your <code>Activity</code>/<code>Context</code> theme extending one of the <code>Theme.AppCompat</code> themes.</li> <li>Variable fonts are not supported in Compose yet, meaning that the value of <code>android:fontVariationSettings</code> are currently ignored.</li> <li>You can modify the resulting <code>MaterialTheme</code> in Compose as required, but this only works in Compose. Any changes you make will not be reflected in the Activity theme.</li> </ul>"},{"location":"themeadapter-appcompat/#usage","title":"Usage","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-themeadapter-appcompat:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"themeadapter-appcompat/#library-snapshots","title":"Library Snapshots","text":"<p>Snapshots of the current development version of this library are available, which track the latest commit. See here for more information on how to use them.</p>"},{"location":"themeadapter-appcompat/#contributions","title":"Contributions","text":"<p>Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.</p>"},{"location":"themeadapter-appcompat/#license","title":"License","text":"<pre><code>Copyright 2022 The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"themeadapter-core/","title":"Core Theme Adapter","text":"<p>Warning</p> <p>This library is deprecated, and the API is no longer maintained. The original documentation is below.</p>"},{"location":"themeadapter-core/#migration","title":"Migration","text":"<p>Recommendation: Use the Material Theme Builder tool, or an alternative design tool, to generate a matching XML and Compose theme implementation for your app. See Migrating XML themes to Compose to learn more.</p> <p>You can checkout Material Design 3 in Compose to learn more about creating and adding theme to your app using Material Theme Builder.</p>"},{"location":"themeadapter-core/#original-documenation","title":"Original Documenation","text":"<p>A library that includes common utilities that enable the reuse of XML themes, for theming in Jetpack Compose.</p> <p>See the API for more details.</p>"},{"location":"themeadapter-core/#usage","title":"Usage","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-themeadapter-core:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"themeadapter-core/#library-snapshots","title":"Library Snapshots","text":"<p>Snapshots of the current development version of this library are available, which track the latest commit. See here for more information on how to use them.</p>"},{"location":"themeadapter-core/#contributions","title":"Contributions","text":"<p>Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.</p>"},{"location":"themeadapter-core/#license","title":"License","text":"<pre><code>Copyright 2022 The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"themeadapter-material/","title":"Material Theme Adapter","text":"<p>Warning</p> <p>This library is deprecated, and the API is no longer maintained. The original documentation is below.</p>"},{"location":"themeadapter-material/#migration","title":"Migration","text":"<p>Recommendation: Use the Material Theme Builder tool, or an alternative design tool, to generate a matching XML and Compose theme implementation for your app. See Migrating XML themes to Compose to learn more.</p> <p>You can checkout Material Design 3 in Compose to learn more about creating and adding theme to your app using Material Theme Builder.</p>"},{"location":"themeadapter-material/#original-documenation","title":"Original Documenation","text":"<p>A library that enables the reuse of MDC-Android Material 2 XML themes, for theming in Jetpack Compose.</p> <p></p> <p>The basis of Material Design 2 theming in Jetpack Compose is the <code>MaterialTheme</code> composable, where you provide <code>Colors</code>, <code>Typography</code> and <code>Shapes</code> instances containing your styling parameters:</p> <pre><code>MaterialTheme(\n    colors = colors,\n    typography = type,\n    shapes = shapes\n) {\n    // M2 Surface, Scaffold, etc.\n}\n</code></pre> <p>Material Components for Android themes allow for similar theming for views via XML theme attributes, like so:</p> <pre><code>&lt;style name=\"Theme.MyApp\" parent=\"Theme.MaterialComponents.DayNight\"&gt;\n    &lt;!-- Material 2 color attributes --&gt;\n    &lt;item name=\"colorPrimary\"&gt;@color/purple_500&lt;/item&gt;\n    &lt;item name=\"colorSecondary\"&gt;@color/green_200&lt;/item&gt;\n\n    &lt;!-- Material 2 type attributes--&gt;\n    &lt;item name=\"textAppearanceBody1\"&gt;@style/TextAppearance.MyApp.Body1&lt;/item&gt;\n    &lt;item name=\"textAppearanceBody2\"&gt;@style/TextAppearance.MyApp.Body2&lt;/item&gt;\n\n    &lt;!-- Material 2 shape attributes--&gt;\n    &lt;item name=\"shapeAppearanceSmallComponent\"&gt;@style/ShapeAppearance.MyApp.SmallComponent&lt;/item&gt;\n&lt;/style&gt;\n</code></pre> <p>This library attempts to bridge the gap between Material Components for Android M2 XML themes, and themes in Jetpack Compose, allowing your composable <code>MaterialTheme</code> to be based on the <code>Activity</code>'s XML theme:</p> <pre><code>MdcTheme {\n    // MaterialTheme.colors, MaterialTheme.typography, MaterialTheme.shapes\n    // will now contain copies of the Context's theme\n}\n</code></pre> <p>This is especially handy when you're migrating an existing app, a <code>Fragment</code> (or other UI container) at a time.</p> <p>Caution</p> <p>If you are using an AppCompat (i.e. non-MDC) theme in your app, you should use AppCompat Theme Adapter instead, as it attempts to bridge the gap between [AppCompat][appcompat] XML themes, and M2 themes in Jetpack Compose.</p>"},{"location":"themeadapter-material/#customizing-the-m2-theme","title":"Customizing the M2 theme","text":"<p>The <code>MdcTheme()</code> function will automatically read the host <code>Context</code>'s MDC theme and pass them to <code>MaterialTheme</code> on your behalf, but if you want to customize the generated values, you can do so via the <code>createMdcTheme()</code> function:</p> <pre><code>val context = LocalContext.current\nval layoutDirection = LocalLayoutDirection.current\nvar (colors, typography, shapes) = createMdcTheme(\n    context = context,\n    layoutDirection = layoutDirection\n)\n\n// Modify colors, typography or shapes as required.\n// Then pass them through to MaterialTheme...\n\nMaterialTheme(\n    colors = colors ?: MaterialTheme.colors,\n    typography = typography ?: MaterialTheme.typography,\n    shapes = shapes ?: MaterialTheme.shapes\n) {\n    // Rest of M2 layout\n}\n</code></pre>"},{"location":"themeadapter-material/#limitations","title":"Limitations","text":"<p>There are some known limitations with the implementation at the moment:</p> <ul> <li>This relies on your <code>Activity</code>/<code>Context</code> theme extending one of the <code>Theme.MaterialComponents</code> themes.</li> <li>Text colors are not read from the text appearances by default. You can enable it via the <code>setTextColors</code> function parameter.</li> <li>Variable fonts are not supported in Compose yet, meaning that the value of <code>android:fontVariationSettings</code> are currently ignored.</li> <li>MDC <code>ShapeAppearances</code> allow setting of different corner families (cut, rounded) on each corner, whereas Compose's Shapes allows only a single corner family for the entire shape. Therefore only the <code>app:cornerFamily</code> attribute is read, others (<code>app:cornerFamilyTopLeft</code>, etc) are ignored.</li> <li>You can modify the resulting <code>MaterialTheme</code> in Compose as required, but this only works in Compose. Any changes you make will not be reflected in the <code>Activity</code> theme.</li> </ul>"},{"location":"themeadapter-material/#usage","title":"Usage","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-themeadapter-material:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"themeadapter-material/#library-snapshots","title":"Library Snapshots","text":"<p>Snapshots of the current development version of this library are available, which track the latest commit. See here for more information on how to use them.</p>"},{"location":"themeadapter-material/#contributions","title":"Contributions","text":"<p>Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.</p>"},{"location":"themeadapter-material/#license","title":"License","text":"<pre><code>Copyright 2022 The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"themeadapter-material3/","title":"Material 3 Theme Adapter","text":"<p>Warning</p> <p>This library is deprecated, and the API is no longer maintained. We recommend generating a theme with Material Theme Builder The original documentation is below.</p>"},{"location":"themeadapter-material3/#migration","title":"Migration","text":"<p>Recommendation: Use the Material Theme Builder tool, or an alternative design tool, to generate a matching XML and Compose theme implementation for your app. See Migrating XML themes to Compose to learn more.</p> <p>You can checkout Material Design 3 in Compose to learn more about creating and adding theme to your app using Material Theme Builder.</p>"},{"location":"themeadapter-material3/#original-documenation","title":"Original Documenation","text":"<p>A library that enables the reuse of MDC-Android Material 3 XML themes, for theming in Jetpack Compose.</p> <p></p> <p>The basis of Material Design 3 theming in Jetpack Compose is the <code>MaterialTheme</code> composable, where you provide <code>ColorScheme</code>, <code>Typography</code> and <code>Shapes</code> instances containing your styling parameters:</p> <pre><code>MaterialTheme(\n    colorScheme = colorScheme,\n    typography = typography,\n    shapes = shapes\n) {\n    // M3 Surface, Scaffold, etc.\n}\n</code></pre> <p>Material Components for Android themes allow for similar theming for views via XML theme attributes, like so:</p> <pre><code>&lt;style name=\"Theme.MyApp\" parent=\"Theme.Material3.DayNight\"&gt;\n    &lt;!-- Material 3 color attributes --&gt;\n    &lt;item name=\"colorPrimary\"&gt;@color/purple_500&lt;/item&gt;\n    &lt;item name=\"colorSecondary\"&gt;@color/purple_700&lt;/item&gt;\n    &lt;item name=\"colorTertiary\"&gt;@color/green_200&lt;/item&gt;\n\n    &lt;!-- Material 3 type attributes--&gt;\n    &lt;item name=\"textAppearanceBodyLarge\"&gt;@style/TextAppearance.MyApp.BodyLarge&lt;/item&gt;\n    &lt;item name=\"textAppearanceBodyMedium\"&gt;@style/TextAppearance.MyApp.BodyMedium&lt;/item&gt;\n\n    &lt;!-- Material 3 shape attributes--&gt;\n    &lt;item name=\"shapeAppearanceCornerSmall\"&gt;@style/ShapeAppearance.MyApp.CornerSmall&lt;/item&gt;\n&lt;/style&gt;\n</code></pre> <p>This library attempts to bridge the gap between Material Components for Android M3 XML themes, and themes in Jetpack Compose, allowing your composable <code>MaterialTheme</code> to be based on the <code>Activity</code>'s XML theme:</p> <pre><code>Mdc3Theme {\n    // MaterialTheme.colorScheme, MaterialTheme.typography, MaterialTheme.shapes\n    // will now contain copies of the Context's theme\n}\n</code></pre> <p>This is especially handy when you're migrating an existing app, a <code>Fragment</code> (or other UI container) at a time.</p>"},{"location":"themeadapter-material3/#customizing-the-m3-theme","title":"Customizing the M3 theme","text":"<p>The <code>Mdc3Theme()</code> function will automatically read the host <code>Context</code>'s MDC theme and pass them to <code>MaterialTheme</code> on your behalf, but if you want to customize the generated values, you can do so via the <code>createMdc3Theme()</code> function:</p> <pre><code>val context = LocalContext.current\nvar (colorScheme, typography, shapes) = createMdc3Theme(\n    context = context\n)\n\n// Modify colorScheme, typography or shapes as required.\n// Then pass them through to MaterialTheme...\n\nMaterialTheme(\n    colorScheme = colorScheme,\n    typography = typography,\n    shapes = shapes\n) {\n    // Rest of M3 layout\n}\n</code></pre>"},{"location":"themeadapter-material3/#limitations","title":"Limitations","text":"<p>There are some known limitations with the implementation at the moment:</p> <ul> <li>This relies on your <code>Activity</code>/<code>Context</code> theme extending one of the <code>Theme.Material3</code> themes.</li> <li>Text colors are not read from the text appearances by default. You can enable it via the <code>setTextColors</code> function parameter.</li> <li>Variable fonts are not supported in Compose yet, meaning that the value of <code>android:fontVariationSettings</code> are currently ignored.</li> <li>MDC <code>ShapeAppearances</code> allow setting of different corner families (cut, rounded) on each corner, whereas Compose's Shapes allows only a single corner family for the entire shape. Therefore only the <code>app:cornerFamily</code> attribute is read, others (<code>app:cornerFamilyTopLeft</code>, etc) are ignored.</li> <li>You can modify the resulting <code>MaterialTheme</code> in Compose as required, but this only works in Compose. Any changes you make will not be reflected in the <code>Activity</code> theme.</li> </ul>"},{"location":"themeadapter-material3/#usage","title":"Usage","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-themeadapter-material3:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"themeadapter-material3/#library-snapshots","title":"Library Snapshots","text":"<p>Snapshots of the current development version of this library are available, which track the latest commit. See here for more information on how to use them.</p>"},{"location":"themeadapter-material3/#contributions","title":"Contributions","text":"<p>Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.</p>"},{"location":"themeadapter-material3/#license","title":"License","text":"<pre><code>Copyright 2022 The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"updating/","title":"Updating &amp; releasing Accompanist","text":"<p>This doc is mostly for maintainers.</p>"},{"location":"updating/#new-features-bugfixes","title":"New features &amp; bugfixes","text":"<p>All new features should be uploaded as PRs against the <code>main</code> branch. </p> <p>Once merged into <code>main</code>, they will be automatically merged into the <code>snapshot</code> branch.</p>"},{"location":"updating/#jetpack-compose-snapshots","title":"Jetpack Compose Snapshots","text":"<p>We publish snapshot versions of Accompanist, which depend on a <code>SNAPSHOT</code> versions of Jetpack Compose. These are built from the <code>snapshot</code> branch.</p>"},{"location":"updating/#updating-to-a-newer-compose-snapshot","title":"Updating to a newer Compose snapshot","text":"<p>As mentioned above, updating to a new Compose snapshot is done by submitting a new PR against the <code>snapshot</code> branch:</p> <pre><code>git checkout snapshot &amp;&amp; git pull\n# Create branch for PR\ngit checkout -b update_snapshot\n</code></pre> <p>Now edit the project to depend on the new Compose SNAPSHOT version:</p> <p>Edit <code>/gradle/libs.versions.toml</code>:</p> <p>Under <code>[versions]</code>:</p> <ol> <li>Update the <code>composesnapshot</code> property to be the snapshot number</li> <li>Ensure that the <code>compose</code> property is correct</li> </ol> <p>Make sure the project builds and test pass: <pre><code>./gradlew check\n</code></pre></p> <p>Now <code>git commit</code> the changes and push to GitHub.</p> <p>Finally create a PR (with the base branch as <code>snapshot</code>) and send for review.</p>"},{"location":"updating/#releasing","title":"Releasing","text":"<p>Once the next Jetpack Compose version is out, we're ready to push a new release:</p>"},{"location":"updating/#1-merge-snapshot-into-main","title":"#1: Merge <code>snapshot</code> into <code>main</code>","text":"<p>First we merge the <code>snapshot</code> branch into <code>main</code>:</p> <pre><code>git checkout snapshot &amp;&amp; git pull\ngit checkout main &amp;&amp; git pull\n\n# Create branch for PR\ngit checkout -b main_snapshot_merge\n\n# Merge in the snapshot branch\ngit merge snapshot\n</code></pre>"},{"location":"updating/#2-update-dependencies","title":"#2: Update dependencies","text":"<p>Edit <code>/gradle/libs.versions.toml</code>:</p> <p>Under <code>[versions]</code>:</p> <ol> <li>Update the <code>composesnapshot</code> property to a single character (usually <code>-</code>). This disables the snapshot repository.</li> <li>Update the <code>compose</code> property to match the new release (i.e. <code>1.0.0-beta06</code>)</li> </ol> <p>Make sure the project builds and test pass: <pre><code>./gradlew check\n</code></pre></p> <p>Commit the changes.</p>"},{"location":"updating/#3-bump-the-version-number","title":"#3: Bump the version number","text":"<p>Edit gradle.properties:</p> <ul> <li>Update the <code>VERSION_NAME</code> property and remove the <code>-SNAPSHOT</code> suffix.</li> </ul> <p>Commit the changes, using the commit message containing the new version name.</p>"},{"location":"updating/#4-push-to-github","title":"#4: Push to GitHub","text":"<p>Push the branch to GitHub and create a PR against the <code>main</code> branch, and send for review. Once approved and merged, it will be automatically deployed to Maven Central.</p>"},{"location":"updating/#5-create-release","title":"#5: Create release","text":"<p>Once the above PR has been approved and merged, we need to create the GitHub release:</p> <ul> <li>Open up the Releases page.</li> <li>At the top you should see a 'Draft' release, auto populated with any PRs since the last release. Click 'Edit'.</li> <li>Make sure that the version number matches what we released (the tool guesses but is not always correct).</li> <li>Double check everything, then press 'Publish release'.</li> </ul> <p>At this point the release is published. This will trigger the docs action to run, which will auto-deploy a new version of the website.</p>"},{"location":"updating/#6-prepare-the-next-development-version","title":"#6: Prepare the next development version","text":"<p>The current release is now finished, but we need to update the version for the next development version:</p> <p>Edit gradle.properties:</p> <ul> <li>Update the <code>VERSION_NAME</code> property, by increasing the version number, and adding the <code>-SNAPSHOT</code> suffix.</li> <li>Example: released version: <code>0.3.0</code>. Update to <code>0.3.1-SNAPSHOT</code></li> </ul> <p><code>git commit</code> and push to <code>main</code>.</p> <p>Finally, merge all of these changes back to <code>snapshot</code>:</p> <pre><code>git checkout snapshot &amp;&amp; git pull\ngit merge main\ngit push\n</code></pre>"},{"location":"using-snapshot-version/","title":"Using a Snapshot Version of the Library","text":"<p>If you would like to depend on the cutting edge version of the Accompanist library, you can use the snapshot versions that are published to Sonatype OSSRH's snapshot repository. These are updated on every commit to <code>main</code>.</p> <p>To do so:</p> <pre><code>repositories {\n    // ...\n    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }\n}\n\ndependencies {\n    // Check the latest SNAPSHOT version from the link above\n    classpath 'com.google.accompanist:accompanist-coil:XXX-SNAPSHOT'\n}\n</code></pre> <p>You might see a number of different versioned snapshots. If we use an example:</p> <ul> <li><code>0.3.0-SNAPSHOT</code> is a build from the <code>main</code> branch, and depends on the latest tagged Jetpack Compose release (i.e. alpha03).</li> <li><code>0.3.0.compose-6574163-SNAPSHOT</code> is a build from the <code>snapshot</code> branch. This depends on the SNAPSHOT build of Jetpack Compose from build <code>6574163</code>. You should only use these if you are using Jetpack Compose snapshot versions (see below).</li> </ul>"},{"location":"using-snapshot-version/#using-jetpack-compose-snapshots","title":"Using Jetpack Compose Snapshots","text":"<p>If you're using <code>SNAPSHOT</code> versions of the <code>androidx.compose</code> libraries, you might run into issues with the current stable Accompanist release forcing an older version of those libraries.</p> <p>We publish snapshot versions of Accompanist which depend on recent Jetpack Compose SNAPSHOT repositories. To find a recent build, look through the snapshot repository for any versions in the scheme <code>x.x.x.compose-YYYY-SNAPSHOT</code> (for example: <code>0.3.0.compose-6574163-SNAPSHOT</code>). The <code>YYYY</code> in the scheme is the snapshot build being used from AndroidX (from the example: build <code>6574163</code>). You can then use it like so:</p> <pre><code>repositories {\n    // ...\n    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }\n}\n\ndependencies {\n    // Check the latest SNAPSHOT version from the link above\n    classpath 'com.google.accompanist:accompanist-coil:XXXX.compose-YYYYY-SNAPSHOT'\n}\n</code></pre> <p>These builds are updated regularly, but there's no guarantee that we will create one for a given snapshot number.</p> <p>Note: you might also see versions in the scheme <code>x.x.x.ui-YYYY-SNAPSHOT</code>. These are the same, just using an older suffix.</p>"},{"location":"web/","title":"WebView wrapper for Jetpack Compose","text":"<p>A library which provides a Jetpack Compose wrapper around Android's WebView.</p> <p>Warning</p> <p>This library is deprecated, and the API is no longer maintained. We recommend forking the implementation and customising it to your needs. The original documentation is below.</p>"},{"location":"web/#usage","title":"Usage","text":"<p>To implement this wrapper there are two key APIs which are needed: <code>WebView</code>, which is provides the layout, and <code>rememberWebViewState(url)</code> which provides some remembered state including the URL to display.</p> <p>The basic usage is as follows:</p> <pre><code>val state = rememberWebViewState(\"https://example.com\")\n\nWebView(\n    state\n)\n</code></pre> <p>This will display a WebView in your Compose layout that shows the URL provided.</p> <p>There is a larger sample in the sample app which can be found here. This sample also shows how to show a loading state.</p>"},{"location":"web/#webview-settings-including-javascript","title":"WebView settings including JavaScript","text":"<p>By default, JavaScript is disabled in the WebView. To enable it or any other settings you can use the <code>onCreated</code> callback.</p> <pre><code>WebView(\n    state = webViewState,\n    onCreated = { it.settings.javaScriptEnabled = true }\n)\n</code></pre>"},{"location":"web/#capturing-back-presses","title":"Capturing back presses","text":"<p>By default the WebView will capture back presses/swipes when relevant and navigate the WebView back. This can be disabled via the parameter on  the Composable.</p> <pre><code>WebView(\n    ...\n    captureBackPresses = false\n)\n</code></pre>"},{"location":"web/#using-a-subclass-of-webview","title":"Using a subclass of WebView","text":"<p>If you want to use a subclass of <code>WebView</code>, or simply require more control over its instantiation, you can provide a factory.</p> <pre><code>WebView(\n    ...\n    factory = { context -&gt; CustomWebView(context) }\n)\n</code></pre>"},{"location":"web/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"com.google.accompanist:accompanist-webview:&lt;version&gt;\"\n}\n</code></pre>"}]}